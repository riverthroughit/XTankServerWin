// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: XTankMsg.proto

#include "XTankMsg.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace XTankMsg {
constexpr PlayerId::PlayerId(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pid_(uint64_t{0u}){}
struct PlayerIdDefaultTypeInternal {
  constexpr PlayerIdDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PlayerIdDefaultTypeInternal() {}
  union {
    PlayerId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PlayerIdDefaultTypeInternal _PlayerId_default_instance_;
constexpr LoginReq::LoginReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : playerid_(nullptr){}
struct LoginReqDefaultTypeInternal {
  constexpr LoginReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LoginReqDefaultTypeInternal() {}
  union {
    LoginReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LoginReqDefaultTypeInternal _LoginReq_default_instance_;
constexpr LoginAck::LoginAck(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , success_(false){}
struct LoginAckDefaultTypeInternal {
  constexpr LoginAckDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LoginAckDefaultTypeInternal() {}
  union {
    LoginAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LoginAckDefaultTypeInternal _LoginAck_default_instance_;
constexpr LogoutReq::LogoutReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : playerid_(nullptr){}
struct LogoutReqDefaultTypeInternal {
  constexpr LogoutReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LogoutReqDefaultTypeInternal() {}
  union {
    LogoutReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LogoutReqDefaultTypeInternal _LogoutReq_default_instance_;
constexpr LogoutAck::LogoutAck(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , success_(false){}
struct LogoutAckDefaultTypeInternal {
  constexpr LogoutAckDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LogoutAckDefaultTypeInternal() {}
  union {
    LogoutAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LogoutAckDefaultTypeInternal _LogoutAck_default_instance_;
constexpr LobbyNtf_RoomInfo::LobbyNtf_RoomInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(0u)
  , playernum_(0u)
  , ingame_(false){}
struct LobbyNtf_RoomInfoDefaultTypeInternal {
  constexpr LobbyNtf_RoomInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LobbyNtf_RoomInfoDefaultTypeInternal() {}
  union {
    LobbyNtf_RoomInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LobbyNtf_RoomInfoDefaultTypeInternal _LobbyNtf_RoomInfo_default_instance_;
constexpr LobbyNtf::LobbyNtf(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rooms_(){}
struct LobbyNtfDefaultTypeInternal {
  constexpr LobbyNtfDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LobbyNtfDefaultTypeInternal() {}
  union {
    LobbyNtf _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LobbyNtfDefaultTypeInternal _LobbyNtf_default_instance_;
constexpr RoomCreateReq::RoomCreateReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : playerid_(nullptr){}
struct RoomCreateReqDefaultTypeInternal {
  constexpr RoomCreateReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RoomCreateReqDefaultTypeInternal() {}
  union {
    RoomCreateReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RoomCreateReqDefaultTypeInternal _RoomCreateReq_default_instance_;
constexpr RoomCreateAck::RoomCreateAck(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , success_(false){}
struct RoomCreateAckDefaultTypeInternal {
  constexpr RoomCreateAckDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RoomCreateAckDefaultTypeInternal() {}
  union {
    RoomCreateAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RoomCreateAckDefaultTypeInternal _RoomCreateAck_default_instance_;
constexpr RoomJoinReq::RoomJoinReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : playerid_(nullptr)
  , roomid_(uint64_t{0u}){}
struct RoomJoinReqDefaultTypeInternal {
  constexpr RoomJoinReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RoomJoinReqDefaultTypeInternal() {}
  union {
    RoomJoinReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RoomJoinReqDefaultTypeInternal _RoomJoinReq_default_instance_;
constexpr RoomJoinAck::RoomJoinAck(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , success_(false){}
struct RoomJoinAckDefaultTypeInternal {
  constexpr RoomJoinAckDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RoomJoinAckDefaultTypeInternal() {}
  union {
    RoomJoinAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RoomJoinAckDefaultTypeInternal _RoomJoinAck_default_instance_;
constexpr RoomExitReq::RoomExitReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : playerid_(nullptr){}
struct RoomExitReqDefaultTypeInternal {
  constexpr RoomExitReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RoomExitReqDefaultTypeInternal() {}
  union {
    RoomExitReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RoomExitReqDefaultTypeInternal _RoomExitReq_default_instance_;
constexpr RoomExitAck::RoomExitAck(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , success_(false){}
struct RoomExitAckDefaultTypeInternal {
  constexpr RoomExitAckDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RoomExitAckDefaultTypeInternal() {}
  union {
    RoomExitAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RoomExitAckDefaultTypeInternal _RoomExitAck_default_instance_;
constexpr RoomNtf_PlayerState::RoomNtf_PlayerState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : playerid_(nullptr)
  , ready_(false){}
struct RoomNtf_PlayerStateDefaultTypeInternal {
  constexpr RoomNtf_PlayerStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RoomNtf_PlayerStateDefaultTypeInternal() {}
  union {
    RoomNtf_PlayerState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RoomNtf_PlayerStateDefaultTypeInternal _RoomNtf_PlayerState_default_instance_;
constexpr RoomNtf::RoomNtf(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : playerstates_()
  , roomid_(0u)
  , isingame_(false){}
struct RoomNtfDefaultTypeInternal {
  constexpr RoomNtfDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RoomNtfDefaultTypeInternal() {}
  union {
    RoomNtf _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RoomNtfDefaultTypeInternal _RoomNtf_default_instance_;
constexpr PlayerReadyReq::PlayerReadyReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : playerid_(nullptr){}
struct PlayerReadyReqDefaultTypeInternal {
  constexpr PlayerReadyReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PlayerReadyReqDefaultTypeInternal() {}
  union {
    PlayerReadyReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PlayerReadyReqDefaultTypeInternal _PlayerReadyReq_default_instance_;
constexpr PlayerReadyAck::PlayerReadyAck(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , success_(false){}
struct PlayerReadyAckDefaultTypeInternal {
  constexpr PlayerReadyAckDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PlayerReadyAckDefaultTypeInternal() {}
  union {
    PlayerReadyAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PlayerReadyAckDefaultTypeInternal _PlayerReadyAck_default_instance_;
constexpr PlayerReadyCancelReq::PlayerReadyCancelReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : playerid_(nullptr){}
struct PlayerReadyCancelReqDefaultTypeInternal {
  constexpr PlayerReadyCancelReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PlayerReadyCancelReqDefaultTypeInternal() {}
  union {
    PlayerReadyCancelReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PlayerReadyCancelReqDefaultTypeInternal _PlayerReadyCancelReq_default_instance_;
constexpr PlayerReadyCancelAck::PlayerReadyCancelAck(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , success_(false){}
struct PlayerReadyCancelAckDefaultTypeInternal {
  constexpr PlayerReadyCancelAckDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PlayerReadyCancelAckDefaultTypeInternal() {}
  union {
    PlayerReadyCancelAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PlayerReadyCancelAckDefaultTypeInternal _PlayerReadyCancelAck_default_instance_;
constexpr GameReadyReq::GameReadyReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : success_(false){}
struct GameReadyReqDefaultTypeInternal {
  constexpr GameReadyReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameReadyReqDefaultTypeInternal() {}
  union {
    GameReadyReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameReadyReqDefaultTypeInternal _GameReadyReq_default_instance_;
constexpr GameInitNtf::GameInitNtf(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : playerids_()
  , randseed_(0){}
struct GameInitNtfDefaultTypeInternal {
  constexpr GameInitNtfDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameInitNtfDefaultTypeInternal() {}
  union {
    GameInitNtf _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameInitNtfDefaultTypeInternal _GameInitNtf_default_instance_;
constexpr GameReadyAck::GameReadyAck(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : playerid_(nullptr){}
struct GameReadyAckDefaultTypeInternal {
  constexpr GameReadyAckDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameReadyAckDefaultTypeInternal() {}
  union {
    GameReadyAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameReadyAckDefaultTypeInternal _GameReadyAck_default_instance_;
constexpr GameStartNtf::GameStartNtf(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : latency_(0){}
struct GameStartNtfDefaultTypeInternal {
  constexpr GameStartNtfDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameStartNtfDefaultTypeInternal() {}
  union {
    GameStartNtf _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameStartNtfDefaultTypeInternal _GameStartNtf_default_instance_;
constexpr PlayerInputNtf::PlayerInputNtf(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : playerid_(nullptr)
  , frameid_(0u)
  , playercmd_(0u){}
struct PlayerInputNtfDefaultTypeInternal {
  constexpr PlayerInputNtfDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PlayerInputNtfDefaultTypeInternal() {}
  union {
    PlayerInputNtf _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PlayerInputNtfDefaultTypeInternal _PlayerInputNtf_default_instance_;
constexpr GameForwardNtf::GameForwardNtf(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : playercmds_()
  , _playercmds_cached_byte_size_(0)
  , frameid_(0u){}
struct GameForwardNtfDefaultTypeInternal {
  constexpr GameForwardNtfDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameForwardNtfDefaultTypeInternal() {}
  union {
    GameForwardNtf _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameForwardNtfDefaultTypeInternal _GameForwardNtf_default_instance_;
constexpr PlayerExitReq::PlayerExitReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : playerid_(nullptr){}
struct PlayerExitReqDefaultTypeInternal {
  constexpr PlayerExitReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PlayerExitReqDefaultTypeInternal() {}
  union {
    PlayerExitReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PlayerExitReqDefaultTypeInternal _PlayerExitReq_default_instance_;
constexpr PlayerExitAck::PlayerExitAck(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , success_(false){}
struct PlayerExitAckDefaultTypeInternal {
  constexpr PlayerExitAckDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PlayerExitAckDefaultTypeInternal() {}
  union {
    PlayerExitAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PlayerExitAckDefaultTypeInternal _PlayerExitAck_default_instance_;
constexpr PlayerCutInReq::PlayerCutInReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : playerid_(nullptr){}
struct PlayerCutInReqDefaultTypeInternal {
  constexpr PlayerCutInReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PlayerCutInReqDefaultTypeInternal() {}
  union {
    PlayerCutInReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PlayerCutInReqDefaultTypeInternal _PlayerCutInReq_default_instance_;
constexpr PlayerCutInNtf::PlayerCutInNtf(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : playerids_()
  , cmds_(){}
struct PlayerCutInNtfDefaultTypeInternal {
  constexpr PlayerCutInNtfDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PlayerCutInNtfDefaultTypeInternal() {}
  union {
    PlayerCutInNtf _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PlayerCutInNtfDefaultTypeInternal _PlayerCutInNtf_default_instance_;
constexpr PlayerChaseUpNtf::PlayerChaseUpNtf(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : playerid_(nullptr){}
struct PlayerChaseUpNtfDefaultTypeInternal {
  constexpr PlayerChaseUpNtfDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PlayerChaseUpNtfDefaultTypeInternal() {}
  union {
    PlayerChaseUpNtf _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PlayerChaseUpNtfDefaultTypeInternal _PlayerChaseUpNtf_default_instance_;
}  // namespace XTankMsg
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_XTankMsg_2eproto[30];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_XTankMsg_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_XTankMsg_2eproto = nullptr;

const uint32_t TableStruct_XTankMsg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XTankMsg::PlayerId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XTankMsg::PlayerId, ip_),
  PROTOBUF_FIELD_OFFSET(::XTankMsg::PlayerId, pid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XTankMsg::LoginReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XTankMsg::LoginReq, playerid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XTankMsg::LoginAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XTankMsg::LoginAck, success_),
  PROTOBUF_FIELD_OFFSET(::XTankMsg::LoginAck, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XTankMsg::LogoutReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XTankMsg::LogoutReq, playerid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XTankMsg::LogoutAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XTankMsg::LogoutAck, success_),
  PROTOBUF_FIELD_OFFSET(::XTankMsg::LogoutAck, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XTankMsg::LobbyNtf_RoomInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XTankMsg::LobbyNtf_RoomInfo, id_),
  PROTOBUF_FIELD_OFFSET(::XTankMsg::LobbyNtf_RoomInfo, playernum_),
  PROTOBUF_FIELD_OFFSET(::XTankMsg::LobbyNtf_RoomInfo, ingame_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XTankMsg::LobbyNtf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XTankMsg::LobbyNtf, rooms_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XTankMsg::RoomCreateReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XTankMsg::RoomCreateReq, playerid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XTankMsg::RoomCreateAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XTankMsg::RoomCreateAck, success_),
  PROTOBUF_FIELD_OFFSET(::XTankMsg::RoomCreateAck, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XTankMsg::RoomJoinReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XTankMsg::RoomJoinReq, playerid_),
  PROTOBUF_FIELD_OFFSET(::XTankMsg::RoomJoinReq, roomid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XTankMsg::RoomJoinAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XTankMsg::RoomJoinAck, success_),
  PROTOBUF_FIELD_OFFSET(::XTankMsg::RoomJoinAck, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XTankMsg::RoomExitReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XTankMsg::RoomExitReq, playerid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XTankMsg::RoomExitAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XTankMsg::RoomExitAck, success_),
  PROTOBUF_FIELD_OFFSET(::XTankMsg::RoomExitAck, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XTankMsg::RoomNtf_PlayerState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XTankMsg::RoomNtf_PlayerState, playerid_),
  PROTOBUF_FIELD_OFFSET(::XTankMsg::RoomNtf_PlayerState, ready_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XTankMsg::RoomNtf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XTankMsg::RoomNtf, roomid_),
  PROTOBUF_FIELD_OFFSET(::XTankMsg::RoomNtf, playerstates_),
  PROTOBUF_FIELD_OFFSET(::XTankMsg::RoomNtf, isingame_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XTankMsg::PlayerReadyReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XTankMsg::PlayerReadyReq, playerid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XTankMsg::PlayerReadyAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XTankMsg::PlayerReadyAck, success_),
  PROTOBUF_FIELD_OFFSET(::XTankMsg::PlayerReadyAck, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XTankMsg::PlayerReadyCancelReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XTankMsg::PlayerReadyCancelReq, playerid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XTankMsg::PlayerReadyCancelAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XTankMsg::PlayerReadyCancelAck, success_),
  PROTOBUF_FIELD_OFFSET(::XTankMsg::PlayerReadyCancelAck, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XTankMsg::GameReadyReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XTankMsg::GameReadyReq, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XTankMsg::GameInitNtf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XTankMsg::GameInitNtf, randseed_),
  PROTOBUF_FIELD_OFFSET(::XTankMsg::GameInitNtf, playerids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XTankMsg::GameReadyAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XTankMsg::GameReadyAck, playerid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XTankMsg::GameStartNtf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XTankMsg::GameStartNtf, latency_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XTankMsg::PlayerInputNtf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XTankMsg::PlayerInputNtf, playerid_),
  PROTOBUF_FIELD_OFFSET(::XTankMsg::PlayerInputNtf, frameid_),
  PROTOBUF_FIELD_OFFSET(::XTankMsg::PlayerInputNtf, playercmd_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XTankMsg::GameForwardNtf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XTankMsg::GameForwardNtf, frameid_),
  PROTOBUF_FIELD_OFFSET(::XTankMsg::GameForwardNtf, playercmds_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XTankMsg::PlayerExitReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XTankMsg::PlayerExitReq, playerid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XTankMsg::PlayerExitAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XTankMsg::PlayerExitAck, success_),
  PROTOBUF_FIELD_OFFSET(::XTankMsg::PlayerExitAck, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XTankMsg::PlayerCutInReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XTankMsg::PlayerCutInReq, playerid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XTankMsg::PlayerCutInNtf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XTankMsg::PlayerCutInNtf, playerids_),
  PROTOBUF_FIELD_OFFSET(::XTankMsg::PlayerCutInNtf, cmds_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XTankMsg::PlayerChaseUpNtf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XTankMsg::PlayerChaseUpNtf, playerid_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::XTankMsg::PlayerId)},
  { 8, -1, -1, sizeof(::XTankMsg::LoginReq)},
  { 15, -1, -1, sizeof(::XTankMsg::LoginAck)},
  { 23, -1, -1, sizeof(::XTankMsg::LogoutReq)},
  { 30, -1, -1, sizeof(::XTankMsg::LogoutAck)},
  { 38, -1, -1, sizeof(::XTankMsg::LobbyNtf_RoomInfo)},
  { 47, -1, -1, sizeof(::XTankMsg::LobbyNtf)},
  { 54, -1, -1, sizeof(::XTankMsg::RoomCreateReq)},
  { 61, -1, -1, sizeof(::XTankMsg::RoomCreateAck)},
  { 69, -1, -1, sizeof(::XTankMsg::RoomJoinReq)},
  { 77, -1, -1, sizeof(::XTankMsg::RoomJoinAck)},
  { 85, -1, -1, sizeof(::XTankMsg::RoomExitReq)},
  { 92, -1, -1, sizeof(::XTankMsg::RoomExitAck)},
  { 100, -1, -1, sizeof(::XTankMsg::RoomNtf_PlayerState)},
  { 108, -1, -1, sizeof(::XTankMsg::RoomNtf)},
  { 117, -1, -1, sizeof(::XTankMsg::PlayerReadyReq)},
  { 124, -1, -1, sizeof(::XTankMsg::PlayerReadyAck)},
  { 132, -1, -1, sizeof(::XTankMsg::PlayerReadyCancelReq)},
  { 139, -1, -1, sizeof(::XTankMsg::PlayerReadyCancelAck)},
  { 147, -1, -1, sizeof(::XTankMsg::GameReadyReq)},
  { 154, -1, -1, sizeof(::XTankMsg::GameInitNtf)},
  { 162, -1, -1, sizeof(::XTankMsg::GameReadyAck)},
  { 169, -1, -1, sizeof(::XTankMsg::GameStartNtf)},
  { 176, -1, -1, sizeof(::XTankMsg::PlayerInputNtf)},
  { 185, -1, -1, sizeof(::XTankMsg::GameForwardNtf)},
  { 193, -1, -1, sizeof(::XTankMsg::PlayerExitReq)},
  { 200, -1, -1, sizeof(::XTankMsg::PlayerExitAck)},
  { 208, -1, -1, sizeof(::XTankMsg::PlayerCutInReq)},
  { 215, -1, -1, sizeof(::XTankMsg::PlayerCutInNtf)},
  { 223, -1, -1, sizeof(::XTankMsg::PlayerChaseUpNtf)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XTankMsg::_PlayerId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XTankMsg::_LoginReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XTankMsg::_LoginAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XTankMsg::_LogoutReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XTankMsg::_LogoutAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XTankMsg::_LobbyNtf_RoomInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XTankMsg::_LobbyNtf_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XTankMsg::_RoomCreateReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XTankMsg::_RoomCreateAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XTankMsg::_RoomJoinReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XTankMsg::_RoomJoinAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XTankMsg::_RoomExitReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XTankMsg::_RoomExitAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XTankMsg::_RoomNtf_PlayerState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XTankMsg::_RoomNtf_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XTankMsg::_PlayerReadyReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XTankMsg::_PlayerReadyAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XTankMsg::_PlayerReadyCancelReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XTankMsg::_PlayerReadyCancelAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XTankMsg::_GameReadyReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XTankMsg::_GameInitNtf_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XTankMsg::_GameReadyAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XTankMsg::_GameStartNtf_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XTankMsg::_PlayerInputNtf_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XTankMsg::_GameForwardNtf_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XTankMsg::_PlayerExitReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XTankMsg::_PlayerExitAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XTankMsg::_PlayerCutInReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XTankMsg::_PlayerCutInNtf_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XTankMsg::_PlayerChaseUpNtf_default_instance_),
};

const char descriptor_table_protodef_XTankMsg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016XTankMsg.proto\022\010XTankMsg\"#\n\010PlayerId\022\n"
  "\n\002ip\030\001 \001(\t\022\013\n\003pid\030\002 \001(\004\"0\n\010LoginReq\022$\n\010p"
  "layerId\030\001 \001(\0132\022.XTankMsg.PlayerId\"(\n\010Log"
  "inAck\022\017\n\007success\030\001 \001(\010\022\013\n\003msg\030\002 \001(\t\"1\n\tL"
  "ogoutReq\022$\n\010playerId\030\001 \001(\0132\022.XTankMsg.Pl"
  "ayerId\")\n\tLogoutAck\022\017\n\007success\030\001 \001(\010\022\013\n\003"
  "msg\030\002 \001(\t\"q\n\010LobbyNtf\022*\n\005rooms\030\001 \003(\0132\033.X"
  "TankMsg.LobbyNtf.RoomInfo\0329\n\010RoomInfo\022\n\n"
  "\002id\030\001 \001(\r\022\021\n\tplayerNum\030\002 \001(\r\022\016\n\006inGame\030\003"
  " \001(\010\"5\n\rRoomCreateReq\022$\n\010playerId\030\001 \001(\0132"
  "\022.XTankMsg.PlayerId\"-\n\rRoomCreateAck\022\017\n\007"
  "success\030\001 \001(\010\022\013\n\003msg\030\002 \001(\t\"C\n\013RoomJoinRe"
  "q\022$\n\010playerId\030\001 \001(\0132\022.XTankMsg.PlayerId\022"
  "\016\n\006roomId\030\002 \001(\004\"+\n\013RoomJoinAck\022\017\n\007succes"
  "s\030\001 \001(\010\022\013\n\003msg\030\002 \001(\t\"3\n\013RoomExitReq\022$\n\010p"
  "layerId\030\001 \001(\0132\022.XTankMsg.PlayerId\"+\n\013Roo"
  "mExitAck\022\017\n\007success\030\001 \001(\010\022\013\n\003msg\030\002 \001(\t\"\244"
  "\001\n\007RoomNtf\022\016\n\006roomId\030\001 \001(\r\0223\n\014playerStat"
  "es\030\002 \003(\0132\035.XTankMsg.RoomNtf.PlayerState\022"
  "\020\n\010IsInGame\030\003 \001(\010\032B\n\013PlayerState\022$\n\010play"
  "erId\030\001 \001(\0132\022.XTankMsg.PlayerId\022\r\n\005ready\030"
  "\002 \001(\010\"6\n\016PlayerReadyReq\022$\n\010playerId\030\001 \001("
  "\0132\022.XTankMsg.PlayerId\".\n\016PlayerReadyAck\022"
  "\017\n\007success\030\001 \001(\010\022\013\n\003msg\030\002 \001(\t\"<\n\024PlayerR"
  "eadyCancelReq\022$\n\010playerId\030\001 \001(\0132\022.XTankM"
  "sg.PlayerId\"4\n\024PlayerReadyCancelAck\022\017\n\007s"
  "uccess\030\001 \001(\010\022\013\n\003msg\030\002 \001(\t\"\037\n\014GameReadyRe"
  "q\022\017\n\007success\030\001 \001(\010\"F\n\013GameInitNtf\022\020\n\010ran"
  "dSeed\030\001 \001(\005\022%\n\tplayerIds\030\002 \003(\0132\022.XTankMs"
  "g.PlayerId\"4\n\014GameReadyAck\022$\n\010playerId\030\001"
  " \001(\0132\022.XTankMsg.PlayerId\"\037\n\014GameStartNtf"
  "\022\017\n\007latency\030\001 \001(\002\"Z\n\016PlayerInputNtf\022$\n\010p"
  "layerId\030\001 \001(\0132\022.XTankMsg.PlayerId\022\017\n\007fra"
  "meId\030\002 \001(\r\022\021\n\tplayerCmd\030\003 \001(\r\"5\n\016GameFor"
  "wardNtf\022\017\n\007frameId\030\001 \001(\r\022\022\n\nplayerCmds\030\002"
  " \003(\r\"5\n\rPlayerExitReq\022$\n\010playerId\030\001 \001(\0132"
  "\022.XTankMsg.PlayerId\"-\n\rPlayerExitAck\022\017\n\007"
  "success\030\001 \001(\010\022\013\n\003msg\030\002 \001(\t\"6\n\016PlayerCutI"
  "nReq\022$\n\010playerId\030\001 \001(\0132\022.XTankMsg.Player"
  "Id\"_\n\016PlayerCutInNtf\022%\n\tplayerIds\030\001 \003(\0132"
  "\022.XTankMsg.PlayerId\022&\n\004cmds\030\002 \003(\0132\030.XTan"
  "kMsg.GameForwardNtf\"8\n\020PlayerChaseUpNtf\022"
  "$\n\010playerId\030\001 \001(\0132\022.XTankMsg.PlayerId*\262\004"
  "\n\003MSG\022\010\n\004NONE\020\000\022\r\n\tLOGIN_REQ\020\001\022\r\n\tLOGIN_"
  "ACK\020\002\022\016\n\nLOGOUT_REQ\020\003\022\016\n\nLOGOUT_ACK\020\004\022\r\n"
  "\tLOBBY_NTF\020\005\022\023\n\017ROOM_CREATE_REQ\020\006\022\023\n\017ROO"
  "M_CREATE_ACK\020\007\022\021\n\rROOM_JOIN_REQ\020\010\022\021\n\rROO"
  "M_JOIN_ACK\020\t\022\021\n\rROOM_EXIT_REQ\020\n\022\021\n\rROOM_"
  "EXIT_ACK\020\013\022\014\n\010ROOM_NTF\020\014\022\024\n\020PLAYER_READY"
  "_REQ\020\r\022\024\n\020PLAYER_READY_ACK\020\016\022\033\n\027PLAYER_R"
  "EADY_CANCEL_REQ\020\017\022\033\n\027PLAYER_READY_CANCEL"
  "_ACK\020\020\022\022\n\016GAME_READY_REQ\020\021\022\021\n\rGAME_INIT_"
  "NTF\020\022\022\022\n\016GAME_READY_ACK\020\023\022\022\n\016GAME_START_"
  "NTF\020\024\022\024\n\020PLAYER_INPUT_NTF\020\025\022\024\n\020GAME_FORW"
  "ARD_NTF\020\026\022\023\n\017PLAYER_EXIT_REQ\020\027\022\023\n\017PLAYER"
  "_EXIT_ACK\020\030\022\025\n\021PLAYER_CUT_IN_REQ\020\031\022\025\n\021PL"
  "AYER_CUT_IN_NTF\020\032\022\027\n\023PLAYER_CHASE_UP_NTF"
  "\020\033b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_XTankMsg_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_XTankMsg_2eproto = {
  false, false, 2290, descriptor_table_protodef_XTankMsg_2eproto, "XTankMsg.proto", 
  &descriptor_table_XTankMsg_2eproto_once, nullptr, 0, 30,
  schemas, file_default_instances, TableStruct_XTankMsg_2eproto::offsets,
  file_level_metadata_XTankMsg_2eproto, file_level_enum_descriptors_XTankMsg_2eproto, file_level_service_descriptors_XTankMsg_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_XTankMsg_2eproto_getter() {
  return &descriptor_table_XTankMsg_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_XTankMsg_2eproto(&descriptor_table_XTankMsg_2eproto);
namespace XTankMsg {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MSG_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_XTankMsg_2eproto);
  return file_level_enum_descriptors_XTankMsg_2eproto[0];
}
bool MSG_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class PlayerId::_Internal {
 public:
};

PlayerId::PlayerId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XTankMsg.PlayerId)
}
PlayerId::PlayerId(const PlayerId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ip().empty()) {
    ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ip(), 
      GetArenaForAllocation());
  }
  pid_ = from.pid_;
  // @@protoc_insertion_point(copy_constructor:XTankMsg.PlayerId)
}

inline void PlayerId::SharedCtor() {
ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
pid_ = uint64_t{0u};
}

PlayerId::~PlayerId() {
  // @@protoc_insertion_point(destructor:XTankMsg.PlayerId)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PlayerId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PlayerId::ArenaDtor(void* object) {
  PlayerId* _this = reinterpret_cast< PlayerId* >(object);
  (void)_this;
}
void PlayerId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayerId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlayerId::Clear() {
// @@protoc_insertion_point(message_clear_start:XTankMsg.PlayerId)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_.ClearToEmpty();
  pid_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "XTankMsg.PlayerId.ip"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 pid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerId::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XTankMsg.PlayerId)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip = 1;
  if (!this->_internal_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XTankMsg.PlayerId.ip");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ip(), target);
  }

  // uint64 pid = 2;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_pid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XTankMsg.PlayerId)
  return target;
}

size_t PlayerId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XTankMsg.PlayerId)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip = 1;
  if (!this->_internal_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // uint64 pid = 2;
  if (this->_internal_pid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_pid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PlayerId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerId::GetClassData() const { return &_class_data_; }

void PlayerId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PlayerId *>(to)->MergeFrom(
      static_cast<const PlayerId &>(from));
}


void PlayerId::MergeFrom(const PlayerId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XTankMsg.PlayerId)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ip().empty()) {
    _internal_set_ip(from._internal_ip());
  }
  if (from._internal_pid() != 0) {
    _internal_set_pid(from._internal_pid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerId::CopyFrom(const PlayerId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XTankMsg.PlayerId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerId::IsInitialized() const {
  return true;
}

void PlayerId::InternalSwap(PlayerId* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ip_, lhs_arena,
      &other->ip_, rhs_arena
  );
  swap(pid_, other->pid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerId::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_XTankMsg_2eproto_getter, &descriptor_table_XTankMsg_2eproto_once,
      file_level_metadata_XTankMsg_2eproto[0]);
}

// ===================================================================

class LoginReq::_Internal {
 public:
  static const ::XTankMsg::PlayerId& playerid(const LoginReq* msg);
};

const ::XTankMsg::PlayerId&
LoginReq::_Internal::playerid(const LoginReq* msg) {
  return *msg->playerid_;
}
LoginReq::LoginReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XTankMsg.LoginReq)
}
LoginReq::LoginReq(const LoginReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_playerid()) {
    playerid_ = new ::XTankMsg::PlayerId(*from.playerid_);
  } else {
    playerid_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:XTankMsg.LoginReq)
}

inline void LoginReq::SharedCtor() {
playerid_ = nullptr;
}

LoginReq::~LoginReq() {
  // @@protoc_insertion_point(destructor:XTankMsg.LoginReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LoginReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete playerid_;
}

void LoginReq::ArenaDtor(void* object) {
  LoginReq* _this = reinterpret_cast< LoginReq* >(object);
  (void)_this;
}
void LoginReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoginReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LoginReq::Clear() {
// @@protoc_insertion_point(message_clear_start:XTankMsg.LoginReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && playerid_ != nullptr) {
    delete playerid_;
  }
  playerid_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .XTankMsg.PlayerId playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_playerid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LoginReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XTankMsg.LoginReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .XTankMsg.PlayerId playerId = 1;
  if (this->_internal_has_playerid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::playerid(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XTankMsg.LoginReq)
  return target;
}

size_t LoginReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XTankMsg.LoginReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .XTankMsg.PlayerId playerId = 1;
  if (this->_internal_has_playerid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *playerid_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LoginReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LoginReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LoginReq::GetClassData() const { return &_class_data_; }

void LoginReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LoginReq *>(to)->MergeFrom(
      static_cast<const LoginReq &>(from));
}


void LoginReq::MergeFrom(const LoginReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XTankMsg.LoginReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_playerid()) {
    _internal_mutable_playerid()->::XTankMsg::PlayerId::MergeFrom(from._internal_playerid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LoginReq::CopyFrom(const LoginReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XTankMsg.LoginReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginReq::IsInitialized() const {
  return true;
}

void LoginReq::InternalSwap(LoginReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(playerid_, other->playerid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_XTankMsg_2eproto_getter, &descriptor_table_XTankMsg_2eproto_once,
      file_level_metadata_XTankMsg_2eproto[1]);
}

// ===================================================================

class LoginAck::_Internal {
 public:
};

LoginAck::LoginAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XTankMsg.LoginAck)
}
LoginAck::LoginAck(const LoginAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArenaForAllocation());
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:XTankMsg.LoginAck)
}

inline void LoginAck::SharedCtor() {
msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
success_ = false;
}

LoginAck::~LoginAck() {
  // @@protoc_insertion_point(destructor:XTankMsg.LoginAck)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LoginAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LoginAck::ArenaDtor(void* object) {
  LoginAck* _this = reinterpret_cast< LoginAck* >(object);
  (void)_this;
}
void LoginAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoginAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LoginAck::Clear() {
// @@protoc_insertion_point(message_clear_start:XTankMsg.LoginAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmpty();
  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "XTankMsg.LoginAck.msg"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LoginAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XTankMsg.LoginAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string msg = 2;
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XTankMsg.LoginAck.msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XTankMsg.LoginAck)
  return target;
}

size_t LoginAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XTankMsg.LoginAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 2;
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LoginAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LoginAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LoginAck::GetClassData() const { return &_class_data_; }

void LoginAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LoginAck *>(to)->MergeFrom(
      static_cast<const LoginAck &>(from));
}


void LoginAck::MergeFrom(const LoginAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XTankMsg.LoginAck)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _internal_set_msg(from._internal_msg());
  }
  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LoginAck::CopyFrom(const LoginAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XTankMsg.LoginAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginAck::IsInitialized() const {
  return true;
}

void LoginAck::InternalSwap(LoginAck* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_, lhs_arena,
      &other->msg_, rhs_arena
  );
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginAck::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_XTankMsg_2eproto_getter, &descriptor_table_XTankMsg_2eproto_once,
      file_level_metadata_XTankMsg_2eproto[2]);
}

// ===================================================================

class LogoutReq::_Internal {
 public:
  static const ::XTankMsg::PlayerId& playerid(const LogoutReq* msg);
};

const ::XTankMsg::PlayerId&
LogoutReq::_Internal::playerid(const LogoutReq* msg) {
  return *msg->playerid_;
}
LogoutReq::LogoutReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XTankMsg.LogoutReq)
}
LogoutReq::LogoutReq(const LogoutReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_playerid()) {
    playerid_ = new ::XTankMsg::PlayerId(*from.playerid_);
  } else {
    playerid_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:XTankMsg.LogoutReq)
}

inline void LogoutReq::SharedCtor() {
playerid_ = nullptr;
}

LogoutReq::~LogoutReq() {
  // @@protoc_insertion_point(destructor:XTankMsg.LogoutReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LogoutReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete playerid_;
}

void LogoutReq::ArenaDtor(void* object) {
  LogoutReq* _this = reinterpret_cast< LogoutReq* >(object);
  (void)_this;
}
void LogoutReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogoutReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LogoutReq::Clear() {
// @@protoc_insertion_point(message_clear_start:XTankMsg.LogoutReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && playerid_ != nullptr) {
    delete playerid_;
  }
  playerid_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogoutReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .XTankMsg.PlayerId playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_playerid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LogoutReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XTankMsg.LogoutReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .XTankMsg.PlayerId playerId = 1;
  if (this->_internal_has_playerid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::playerid(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XTankMsg.LogoutReq)
  return target;
}

size_t LogoutReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XTankMsg.LogoutReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .XTankMsg.PlayerId playerId = 1;
  if (this->_internal_has_playerid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *playerid_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogoutReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LogoutReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogoutReq::GetClassData() const { return &_class_data_; }

void LogoutReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LogoutReq *>(to)->MergeFrom(
      static_cast<const LogoutReq &>(from));
}


void LogoutReq::MergeFrom(const LogoutReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XTankMsg.LogoutReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_playerid()) {
    _internal_mutable_playerid()->::XTankMsg::PlayerId::MergeFrom(from._internal_playerid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogoutReq::CopyFrom(const LogoutReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XTankMsg.LogoutReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogoutReq::IsInitialized() const {
  return true;
}

void LogoutReq::InternalSwap(LogoutReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(playerid_, other->playerid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogoutReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_XTankMsg_2eproto_getter, &descriptor_table_XTankMsg_2eproto_once,
      file_level_metadata_XTankMsg_2eproto[3]);
}

// ===================================================================

class LogoutAck::_Internal {
 public:
};

LogoutAck::LogoutAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XTankMsg.LogoutAck)
}
LogoutAck::LogoutAck(const LogoutAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArenaForAllocation());
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:XTankMsg.LogoutAck)
}

inline void LogoutAck::SharedCtor() {
msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
success_ = false;
}

LogoutAck::~LogoutAck() {
  // @@protoc_insertion_point(destructor:XTankMsg.LogoutAck)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LogoutAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LogoutAck::ArenaDtor(void* object) {
  LogoutAck* _this = reinterpret_cast< LogoutAck* >(object);
  (void)_this;
}
void LogoutAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogoutAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LogoutAck::Clear() {
// @@protoc_insertion_point(message_clear_start:XTankMsg.LogoutAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmpty();
  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogoutAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "XTankMsg.LogoutAck.msg"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LogoutAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XTankMsg.LogoutAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string msg = 2;
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XTankMsg.LogoutAck.msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XTankMsg.LogoutAck)
  return target;
}

size_t LogoutAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XTankMsg.LogoutAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 2;
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogoutAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LogoutAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogoutAck::GetClassData() const { return &_class_data_; }

void LogoutAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LogoutAck *>(to)->MergeFrom(
      static_cast<const LogoutAck &>(from));
}


void LogoutAck::MergeFrom(const LogoutAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XTankMsg.LogoutAck)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _internal_set_msg(from._internal_msg());
  }
  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogoutAck::CopyFrom(const LogoutAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XTankMsg.LogoutAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogoutAck::IsInitialized() const {
  return true;
}

void LogoutAck::InternalSwap(LogoutAck* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_, lhs_arena,
      &other->msg_, rhs_arena
  );
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogoutAck::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_XTankMsg_2eproto_getter, &descriptor_table_XTankMsg_2eproto_once,
      file_level_metadata_XTankMsg_2eproto[4]);
}

// ===================================================================

class LobbyNtf_RoomInfo::_Internal {
 public:
};

LobbyNtf_RoomInfo::LobbyNtf_RoomInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XTankMsg.LobbyNtf.RoomInfo)
}
LobbyNtf_RoomInfo::LobbyNtf_RoomInfo(const LobbyNtf_RoomInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&ingame_) -
    reinterpret_cast<char*>(&id_)) + sizeof(ingame_));
  // @@protoc_insertion_point(copy_constructor:XTankMsg.LobbyNtf.RoomInfo)
}

inline void LobbyNtf_RoomInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ingame_) -
    reinterpret_cast<char*>(&id_)) + sizeof(ingame_));
}

LobbyNtf_RoomInfo::~LobbyNtf_RoomInfo() {
  // @@protoc_insertion_point(destructor:XTankMsg.LobbyNtf.RoomInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LobbyNtf_RoomInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LobbyNtf_RoomInfo::ArenaDtor(void* object) {
  LobbyNtf_RoomInfo* _this = reinterpret_cast< LobbyNtf_RoomInfo* >(object);
  (void)_this;
}
void LobbyNtf_RoomInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LobbyNtf_RoomInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LobbyNtf_RoomInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:XTankMsg.LobbyNtf.RoomInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ingame_) -
      reinterpret_cast<char*>(&id_)) + sizeof(ingame_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LobbyNtf_RoomInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 playerNum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          playernum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool inGame = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ingame_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LobbyNtf_RoomInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XTankMsg.LobbyNtf.RoomInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // uint32 playerNum = 2;
  if (this->_internal_playernum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_playernum(), target);
  }

  // bool inGame = 3;
  if (this->_internal_ingame() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_ingame(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XTankMsg.LobbyNtf.RoomInfo)
  return target;
}

size_t LobbyNtf_RoomInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XTankMsg.LobbyNtf.RoomInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // uint32 playerNum = 2;
  if (this->_internal_playernum() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_playernum());
  }

  // bool inGame = 3;
  if (this->_internal_ingame() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LobbyNtf_RoomInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LobbyNtf_RoomInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LobbyNtf_RoomInfo::GetClassData() const { return &_class_data_; }

void LobbyNtf_RoomInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LobbyNtf_RoomInfo *>(to)->MergeFrom(
      static_cast<const LobbyNtf_RoomInfo &>(from));
}


void LobbyNtf_RoomInfo::MergeFrom(const LobbyNtf_RoomInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XTankMsg.LobbyNtf.RoomInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_playernum() != 0) {
    _internal_set_playernum(from._internal_playernum());
  }
  if (from._internal_ingame() != 0) {
    _internal_set_ingame(from._internal_ingame());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LobbyNtf_RoomInfo::CopyFrom(const LobbyNtf_RoomInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XTankMsg.LobbyNtf.RoomInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LobbyNtf_RoomInfo::IsInitialized() const {
  return true;
}

void LobbyNtf_RoomInfo::InternalSwap(LobbyNtf_RoomInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LobbyNtf_RoomInfo, ingame_)
      + sizeof(LobbyNtf_RoomInfo::ingame_)
      - PROTOBUF_FIELD_OFFSET(LobbyNtf_RoomInfo, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LobbyNtf_RoomInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_XTankMsg_2eproto_getter, &descriptor_table_XTankMsg_2eproto_once,
      file_level_metadata_XTankMsg_2eproto[5]);
}

// ===================================================================

class LobbyNtf::_Internal {
 public:
};

LobbyNtf::LobbyNtf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  rooms_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XTankMsg.LobbyNtf)
}
LobbyNtf::LobbyNtf(const LobbyNtf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      rooms_(from.rooms_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:XTankMsg.LobbyNtf)
}

inline void LobbyNtf::SharedCtor() {
}

LobbyNtf::~LobbyNtf() {
  // @@protoc_insertion_point(destructor:XTankMsg.LobbyNtf)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LobbyNtf::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LobbyNtf::ArenaDtor(void* object) {
  LobbyNtf* _this = reinterpret_cast< LobbyNtf* >(object);
  (void)_this;
}
void LobbyNtf::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LobbyNtf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LobbyNtf::Clear() {
// @@protoc_insertion_point(message_clear_start:XTankMsg.LobbyNtf)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rooms_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LobbyNtf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .XTankMsg.LobbyNtf.RoomInfo rooms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rooms(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LobbyNtf::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XTankMsg.LobbyNtf)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .XTankMsg.LobbyNtf.RoomInfo rooms = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rooms_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_rooms(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XTankMsg.LobbyNtf)
  return target;
}

size_t LobbyNtf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XTankMsg.LobbyNtf)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .XTankMsg.LobbyNtf.RoomInfo rooms = 1;
  total_size += 1UL * this->_internal_rooms_size();
  for (const auto& msg : this->rooms_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LobbyNtf::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LobbyNtf::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LobbyNtf::GetClassData() const { return &_class_data_; }

void LobbyNtf::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LobbyNtf *>(to)->MergeFrom(
      static_cast<const LobbyNtf &>(from));
}


void LobbyNtf::MergeFrom(const LobbyNtf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XTankMsg.LobbyNtf)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  rooms_.MergeFrom(from.rooms_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LobbyNtf::CopyFrom(const LobbyNtf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XTankMsg.LobbyNtf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LobbyNtf::IsInitialized() const {
  return true;
}

void LobbyNtf::InternalSwap(LobbyNtf* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  rooms_.InternalSwap(&other->rooms_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LobbyNtf::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_XTankMsg_2eproto_getter, &descriptor_table_XTankMsg_2eproto_once,
      file_level_metadata_XTankMsg_2eproto[6]);
}

// ===================================================================

class RoomCreateReq::_Internal {
 public:
  static const ::XTankMsg::PlayerId& playerid(const RoomCreateReq* msg);
};

const ::XTankMsg::PlayerId&
RoomCreateReq::_Internal::playerid(const RoomCreateReq* msg) {
  return *msg->playerid_;
}
RoomCreateReq::RoomCreateReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XTankMsg.RoomCreateReq)
}
RoomCreateReq::RoomCreateReq(const RoomCreateReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_playerid()) {
    playerid_ = new ::XTankMsg::PlayerId(*from.playerid_);
  } else {
    playerid_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:XTankMsg.RoomCreateReq)
}

inline void RoomCreateReq::SharedCtor() {
playerid_ = nullptr;
}

RoomCreateReq::~RoomCreateReq() {
  // @@protoc_insertion_point(destructor:XTankMsg.RoomCreateReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RoomCreateReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete playerid_;
}

void RoomCreateReq::ArenaDtor(void* object) {
  RoomCreateReq* _this = reinterpret_cast< RoomCreateReq* >(object);
  (void)_this;
}
void RoomCreateReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoomCreateReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RoomCreateReq::Clear() {
// @@protoc_insertion_point(message_clear_start:XTankMsg.RoomCreateReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && playerid_ != nullptr) {
    delete playerid_;
  }
  playerid_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoomCreateReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .XTankMsg.PlayerId playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_playerid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoomCreateReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XTankMsg.RoomCreateReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .XTankMsg.PlayerId playerId = 1;
  if (this->_internal_has_playerid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::playerid(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XTankMsg.RoomCreateReq)
  return target;
}

size_t RoomCreateReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XTankMsg.RoomCreateReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .XTankMsg.PlayerId playerId = 1;
  if (this->_internal_has_playerid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *playerid_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoomCreateReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RoomCreateReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoomCreateReq::GetClassData() const { return &_class_data_; }

void RoomCreateReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RoomCreateReq *>(to)->MergeFrom(
      static_cast<const RoomCreateReq &>(from));
}


void RoomCreateReq::MergeFrom(const RoomCreateReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XTankMsg.RoomCreateReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_playerid()) {
    _internal_mutable_playerid()->::XTankMsg::PlayerId::MergeFrom(from._internal_playerid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoomCreateReq::CopyFrom(const RoomCreateReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XTankMsg.RoomCreateReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomCreateReq::IsInitialized() const {
  return true;
}

void RoomCreateReq::InternalSwap(RoomCreateReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(playerid_, other->playerid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomCreateReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_XTankMsg_2eproto_getter, &descriptor_table_XTankMsg_2eproto_once,
      file_level_metadata_XTankMsg_2eproto[7]);
}

// ===================================================================

class RoomCreateAck::_Internal {
 public:
};

RoomCreateAck::RoomCreateAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XTankMsg.RoomCreateAck)
}
RoomCreateAck::RoomCreateAck(const RoomCreateAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArenaForAllocation());
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:XTankMsg.RoomCreateAck)
}

inline void RoomCreateAck::SharedCtor() {
msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
success_ = false;
}

RoomCreateAck::~RoomCreateAck() {
  // @@protoc_insertion_point(destructor:XTankMsg.RoomCreateAck)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RoomCreateAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RoomCreateAck::ArenaDtor(void* object) {
  RoomCreateAck* _this = reinterpret_cast< RoomCreateAck* >(object);
  (void)_this;
}
void RoomCreateAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoomCreateAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RoomCreateAck::Clear() {
// @@protoc_insertion_point(message_clear_start:XTankMsg.RoomCreateAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmpty();
  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoomCreateAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "XTankMsg.RoomCreateAck.msg"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoomCreateAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XTankMsg.RoomCreateAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string msg = 2;
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XTankMsg.RoomCreateAck.msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XTankMsg.RoomCreateAck)
  return target;
}

size_t RoomCreateAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XTankMsg.RoomCreateAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 2;
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoomCreateAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RoomCreateAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoomCreateAck::GetClassData() const { return &_class_data_; }

void RoomCreateAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RoomCreateAck *>(to)->MergeFrom(
      static_cast<const RoomCreateAck &>(from));
}


void RoomCreateAck::MergeFrom(const RoomCreateAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XTankMsg.RoomCreateAck)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _internal_set_msg(from._internal_msg());
  }
  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoomCreateAck::CopyFrom(const RoomCreateAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XTankMsg.RoomCreateAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomCreateAck::IsInitialized() const {
  return true;
}

void RoomCreateAck::InternalSwap(RoomCreateAck* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_, lhs_arena,
      &other->msg_, rhs_arena
  );
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomCreateAck::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_XTankMsg_2eproto_getter, &descriptor_table_XTankMsg_2eproto_once,
      file_level_metadata_XTankMsg_2eproto[8]);
}

// ===================================================================

class RoomJoinReq::_Internal {
 public:
  static const ::XTankMsg::PlayerId& playerid(const RoomJoinReq* msg);
};

const ::XTankMsg::PlayerId&
RoomJoinReq::_Internal::playerid(const RoomJoinReq* msg) {
  return *msg->playerid_;
}
RoomJoinReq::RoomJoinReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XTankMsg.RoomJoinReq)
}
RoomJoinReq::RoomJoinReq(const RoomJoinReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_playerid()) {
    playerid_ = new ::XTankMsg::PlayerId(*from.playerid_);
  } else {
    playerid_ = nullptr;
  }
  roomid_ = from.roomid_;
  // @@protoc_insertion_point(copy_constructor:XTankMsg.RoomJoinReq)
}

inline void RoomJoinReq::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&playerid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&roomid_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(roomid_));
}

RoomJoinReq::~RoomJoinReq() {
  // @@protoc_insertion_point(destructor:XTankMsg.RoomJoinReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RoomJoinReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete playerid_;
}

void RoomJoinReq::ArenaDtor(void* object) {
  RoomJoinReq* _this = reinterpret_cast< RoomJoinReq* >(object);
  (void)_this;
}
void RoomJoinReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoomJoinReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RoomJoinReq::Clear() {
// @@protoc_insertion_point(message_clear_start:XTankMsg.RoomJoinReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && playerid_ != nullptr) {
    delete playerid_;
  }
  playerid_ = nullptr;
  roomid_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoomJoinReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .XTankMsg.PlayerId playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_playerid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 roomId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          roomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoomJoinReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XTankMsg.RoomJoinReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .XTankMsg.PlayerId playerId = 1;
  if (this->_internal_has_playerid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::playerid(this), target, stream);
  }

  // uint64 roomId = 2;
  if (this->_internal_roomid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_roomid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XTankMsg.RoomJoinReq)
  return target;
}

size_t RoomJoinReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XTankMsg.RoomJoinReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .XTankMsg.PlayerId playerId = 1;
  if (this->_internal_has_playerid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *playerid_);
  }

  // uint64 roomId = 2;
  if (this->_internal_roomid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_roomid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoomJoinReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RoomJoinReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoomJoinReq::GetClassData() const { return &_class_data_; }

void RoomJoinReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RoomJoinReq *>(to)->MergeFrom(
      static_cast<const RoomJoinReq &>(from));
}


void RoomJoinReq::MergeFrom(const RoomJoinReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XTankMsg.RoomJoinReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_playerid()) {
    _internal_mutable_playerid()->::XTankMsg::PlayerId::MergeFrom(from._internal_playerid());
  }
  if (from._internal_roomid() != 0) {
    _internal_set_roomid(from._internal_roomid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoomJoinReq::CopyFrom(const RoomJoinReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XTankMsg.RoomJoinReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomJoinReq::IsInitialized() const {
  return true;
}

void RoomJoinReq::InternalSwap(RoomJoinReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoomJoinReq, roomid_)
      + sizeof(RoomJoinReq::roomid_)
      - PROTOBUF_FIELD_OFFSET(RoomJoinReq, playerid_)>(
          reinterpret_cast<char*>(&playerid_),
          reinterpret_cast<char*>(&other->playerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomJoinReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_XTankMsg_2eproto_getter, &descriptor_table_XTankMsg_2eproto_once,
      file_level_metadata_XTankMsg_2eproto[9]);
}

// ===================================================================

class RoomJoinAck::_Internal {
 public:
};

RoomJoinAck::RoomJoinAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XTankMsg.RoomJoinAck)
}
RoomJoinAck::RoomJoinAck(const RoomJoinAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArenaForAllocation());
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:XTankMsg.RoomJoinAck)
}

inline void RoomJoinAck::SharedCtor() {
msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
success_ = false;
}

RoomJoinAck::~RoomJoinAck() {
  // @@protoc_insertion_point(destructor:XTankMsg.RoomJoinAck)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RoomJoinAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RoomJoinAck::ArenaDtor(void* object) {
  RoomJoinAck* _this = reinterpret_cast< RoomJoinAck* >(object);
  (void)_this;
}
void RoomJoinAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoomJoinAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RoomJoinAck::Clear() {
// @@protoc_insertion_point(message_clear_start:XTankMsg.RoomJoinAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmpty();
  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoomJoinAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "XTankMsg.RoomJoinAck.msg"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoomJoinAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XTankMsg.RoomJoinAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string msg = 2;
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XTankMsg.RoomJoinAck.msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XTankMsg.RoomJoinAck)
  return target;
}

size_t RoomJoinAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XTankMsg.RoomJoinAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 2;
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoomJoinAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RoomJoinAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoomJoinAck::GetClassData() const { return &_class_data_; }

void RoomJoinAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RoomJoinAck *>(to)->MergeFrom(
      static_cast<const RoomJoinAck &>(from));
}


void RoomJoinAck::MergeFrom(const RoomJoinAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XTankMsg.RoomJoinAck)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _internal_set_msg(from._internal_msg());
  }
  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoomJoinAck::CopyFrom(const RoomJoinAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XTankMsg.RoomJoinAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomJoinAck::IsInitialized() const {
  return true;
}

void RoomJoinAck::InternalSwap(RoomJoinAck* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_, lhs_arena,
      &other->msg_, rhs_arena
  );
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomJoinAck::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_XTankMsg_2eproto_getter, &descriptor_table_XTankMsg_2eproto_once,
      file_level_metadata_XTankMsg_2eproto[10]);
}

// ===================================================================

class RoomExitReq::_Internal {
 public:
  static const ::XTankMsg::PlayerId& playerid(const RoomExitReq* msg);
};

const ::XTankMsg::PlayerId&
RoomExitReq::_Internal::playerid(const RoomExitReq* msg) {
  return *msg->playerid_;
}
RoomExitReq::RoomExitReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XTankMsg.RoomExitReq)
}
RoomExitReq::RoomExitReq(const RoomExitReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_playerid()) {
    playerid_ = new ::XTankMsg::PlayerId(*from.playerid_);
  } else {
    playerid_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:XTankMsg.RoomExitReq)
}

inline void RoomExitReq::SharedCtor() {
playerid_ = nullptr;
}

RoomExitReq::~RoomExitReq() {
  // @@protoc_insertion_point(destructor:XTankMsg.RoomExitReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RoomExitReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete playerid_;
}

void RoomExitReq::ArenaDtor(void* object) {
  RoomExitReq* _this = reinterpret_cast< RoomExitReq* >(object);
  (void)_this;
}
void RoomExitReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoomExitReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RoomExitReq::Clear() {
// @@protoc_insertion_point(message_clear_start:XTankMsg.RoomExitReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && playerid_ != nullptr) {
    delete playerid_;
  }
  playerid_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoomExitReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .XTankMsg.PlayerId playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_playerid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoomExitReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XTankMsg.RoomExitReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .XTankMsg.PlayerId playerId = 1;
  if (this->_internal_has_playerid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::playerid(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XTankMsg.RoomExitReq)
  return target;
}

size_t RoomExitReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XTankMsg.RoomExitReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .XTankMsg.PlayerId playerId = 1;
  if (this->_internal_has_playerid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *playerid_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoomExitReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RoomExitReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoomExitReq::GetClassData() const { return &_class_data_; }

void RoomExitReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RoomExitReq *>(to)->MergeFrom(
      static_cast<const RoomExitReq &>(from));
}


void RoomExitReq::MergeFrom(const RoomExitReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XTankMsg.RoomExitReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_playerid()) {
    _internal_mutable_playerid()->::XTankMsg::PlayerId::MergeFrom(from._internal_playerid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoomExitReq::CopyFrom(const RoomExitReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XTankMsg.RoomExitReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomExitReq::IsInitialized() const {
  return true;
}

void RoomExitReq::InternalSwap(RoomExitReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(playerid_, other->playerid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomExitReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_XTankMsg_2eproto_getter, &descriptor_table_XTankMsg_2eproto_once,
      file_level_metadata_XTankMsg_2eproto[11]);
}

// ===================================================================

class RoomExitAck::_Internal {
 public:
};

RoomExitAck::RoomExitAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XTankMsg.RoomExitAck)
}
RoomExitAck::RoomExitAck(const RoomExitAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArenaForAllocation());
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:XTankMsg.RoomExitAck)
}

inline void RoomExitAck::SharedCtor() {
msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
success_ = false;
}

RoomExitAck::~RoomExitAck() {
  // @@protoc_insertion_point(destructor:XTankMsg.RoomExitAck)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RoomExitAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RoomExitAck::ArenaDtor(void* object) {
  RoomExitAck* _this = reinterpret_cast< RoomExitAck* >(object);
  (void)_this;
}
void RoomExitAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoomExitAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RoomExitAck::Clear() {
// @@protoc_insertion_point(message_clear_start:XTankMsg.RoomExitAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmpty();
  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoomExitAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "XTankMsg.RoomExitAck.msg"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoomExitAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XTankMsg.RoomExitAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string msg = 2;
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XTankMsg.RoomExitAck.msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XTankMsg.RoomExitAck)
  return target;
}

size_t RoomExitAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XTankMsg.RoomExitAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 2;
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoomExitAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RoomExitAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoomExitAck::GetClassData() const { return &_class_data_; }

void RoomExitAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RoomExitAck *>(to)->MergeFrom(
      static_cast<const RoomExitAck &>(from));
}


void RoomExitAck::MergeFrom(const RoomExitAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XTankMsg.RoomExitAck)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _internal_set_msg(from._internal_msg());
  }
  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoomExitAck::CopyFrom(const RoomExitAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XTankMsg.RoomExitAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomExitAck::IsInitialized() const {
  return true;
}

void RoomExitAck::InternalSwap(RoomExitAck* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_, lhs_arena,
      &other->msg_, rhs_arena
  );
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomExitAck::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_XTankMsg_2eproto_getter, &descriptor_table_XTankMsg_2eproto_once,
      file_level_metadata_XTankMsg_2eproto[12]);
}

// ===================================================================

class RoomNtf_PlayerState::_Internal {
 public:
  static const ::XTankMsg::PlayerId& playerid(const RoomNtf_PlayerState* msg);
};

const ::XTankMsg::PlayerId&
RoomNtf_PlayerState::_Internal::playerid(const RoomNtf_PlayerState* msg) {
  return *msg->playerid_;
}
RoomNtf_PlayerState::RoomNtf_PlayerState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XTankMsg.RoomNtf.PlayerState)
}
RoomNtf_PlayerState::RoomNtf_PlayerState(const RoomNtf_PlayerState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_playerid()) {
    playerid_ = new ::XTankMsg::PlayerId(*from.playerid_);
  } else {
    playerid_ = nullptr;
  }
  ready_ = from.ready_;
  // @@protoc_insertion_point(copy_constructor:XTankMsg.RoomNtf.PlayerState)
}

inline void RoomNtf_PlayerState::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&playerid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ready_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(ready_));
}

RoomNtf_PlayerState::~RoomNtf_PlayerState() {
  // @@protoc_insertion_point(destructor:XTankMsg.RoomNtf.PlayerState)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RoomNtf_PlayerState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete playerid_;
}

void RoomNtf_PlayerState::ArenaDtor(void* object) {
  RoomNtf_PlayerState* _this = reinterpret_cast< RoomNtf_PlayerState* >(object);
  (void)_this;
}
void RoomNtf_PlayerState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoomNtf_PlayerState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RoomNtf_PlayerState::Clear() {
// @@protoc_insertion_point(message_clear_start:XTankMsg.RoomNtf.PlayerState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && playerid_ != nullptr) {
    delete playerid_;
  }
  playerid_ = nullptr;
  ready_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoomNtf_PlayerState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .XTankMsg.PlayerId playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_playerid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool ready = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ready_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoomNtf_PlayerState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XTankMsg.RoomNtf.PlayerState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .XTankMsg.PlayerId playerId = 1;
  if (this->_internal_has_playerid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::playerid(this), target, stream);
  }

  // bool ready = 2;
  if (this->_internal_ready() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_ready(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XTankMsg.RoomNtf.PlayerState)
  return target;
}

size_t RoomNtf_PlayerState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XTankMsg.RoomNtf.PlayerState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .XTankMsg.PlayerId playerId = 1;
  if (this->_internal_has_playerid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *playerid_);
  }

  // bool ready = 2;
  if (this->_internal_ready() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoomNtf_PlayerState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RoomNtf_PlayerState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoomNtf_PlayerState::GetClassData() const { return &_class_data_; }

void RoomNtf_PlayerState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RoomNtf_PlayerState *>(to)->MergeFrom(
      static_cast<const RoomNtf_PlayerState &>(from));
}


void RoomNtf_PlayerState::MergeFrom(const RoomNtf_PlayerState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XTankMsg.RoomNtf.PlayerState)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_playerid()) {
    _internal_mutable_playerid()->::XTankMsg::PlayerId::MergeFrom(from._internal_playerid());
  }
  if (from._internal_ready() != 0) {
    _internal_set_ready(from._internal_ready());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoomNtf_PlayerState::CopyFrom(const RoomNtf_PlayerState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XTankMsg.RoomNtf.PlayerState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomNtf_PlayerState::IsInitialized() const {
  return true;
}

void RoomNtf_PlayerState::InternalSwap(RoomNtf_PlayerState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoomNtf_PlayerState, ready_)
      + sizeof(RoomNtf_PlayerState::ready_)
      - PROTOBUF_FIELD_OFFSET(RoomNtf_PlayerState, playerid_)>(
          reinterpret_cast<char*>(&playerid_),
          reinterpret_cast<char*>(&other->playerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomNtf_PlayerState::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_XTankMsg_2eproto_getter, &descriptor_table_XTankMsg_2eproto_once,
      file_level_metadata_XTankMsg_2eproto[13]);
}

// ===================================================================

class RoomNtf::_Internal {
 public:
};

RoomNtf::RoomNtf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  playerstates_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XTankMsg.RoomNtf)
}
RoomNtf::RoomNtf(const RoomNtf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      playerstates_(from.playerstates_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&roomid_, &from.roomid_,
    static_cast<size_t>(reinterpret_cast<char*>(&isingame_) -
    reinterpret_cast<char*>(&roomid_)) + sizeof(isingame_));
  // @@protoc_insertion_point(copy_constructor:XTankMsg.RoomNtf)
}

inline void RoomNtf::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&roomid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&isingame_) -
    reinterpret_cast<char*>(&roomid_)) + sizeof(isingame_));
}

RoomNtf::~RoomNtf() {
  // @@protoc_insertion_point(destructor:XTankMsg.RoomNtf)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RoomNtf::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RoomNtf::ArenaDtor(void* object) {
  RoomNtf* _this = reinterpret_cast< RoomNtf* >(object);
  (void)_this;
}
void RoomNtf::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoomNtf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RoomNtf::Clear() {
// @@protoc_insertion_point(message_clear_start:XTankMsg.RoomNtf)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  playerstates_.Clear();
  ::memset(&roomid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isingame_) -
      reinterpret_cast<char*>(&roomid_)) + sizeof(isingame_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoomNtf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 roomId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          roomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .XTankMsg.RoomNtf.PlayerState playerStates = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_playerstates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool IsInGame = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          isingame_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoomNtf::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XTankMsg.RoomNtf)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 roomId = 1;
  if (this->_internal_roomid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_roomid(), target);
  }

  // repeated .XTankMsg.RoomNtf.PlayerState playerStates = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_playerstates_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_playerstates(i), target, stream);
  }

  // bool IsInGame = 3;
  if (this->_internal_isingame() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_isingame(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XTankMsg.RoomNtf)
  return target;
}

size_t RoomNtf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XTankMsg.RoomNtf)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .XTankMsg.RoomNtf.PlayerState playerStates = 2;
  total_size += 1UL * this->_internal_playerstates_size();
  for (const auto& msg : this->playerstates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 roomId = 1;
  if (this->_internal_roomid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_roomid());
  }

  // bool IsInGame = 3;
  if (this->_internal_isingame() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoomNtf::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RoomNtf::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoomNtf::GetClassData() const { return &_class_data_; }

void RoomNtf::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RoomNtf *>(to)->MergeFrom(
      static_cast<const RoomNtf &>(from));
}


void RoomNtf::MergeFrom(const RoomNtf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XTankMsg.RoomNtf)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  playerstates_.MergeFrom(from.playerstates_);
  if (from._internal_roomid() != 0) {
    _internal_set_roomid(from._internal_roomid());
  }
  if (from._internal_isingame() != 0) {
    _internal_set_isingame(from._internal_isingame());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoomNtf::CopyFrom(const RoomNtf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XTankMsg.RoomNtf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomNtf::IsInitialized() const {
  return true;
}

void RoomNtf::InternalSwap(RoomNtf* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  playerstates_.InternalSwap(&other->playerstates_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoomNtf, isingame_)
      + sizeof(RoomNtf::isingame_)
      - PROTOBUF_FIELD_OFFSET(RoomNtf, roomid_)>(
          reinterpret_cast<char*>(&roomid_),
          reinterpret_cast<char*>(&other->roomid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomNtf::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_XTankMsg_2eproto_getter, &descriptor_table_XTankMsg_2eproto_once,
      file_level_metadata_XTankMsg_2eproto[14]);
}

// ===================================================================

class PlayerReadyReq::_Internal {
 public:
  static const ::XTankMsg::PlayerId& playerid(const PlayerReadyReq* msg);
};

const ::XTankMsg::PlayerId&
PlayerReadyReq::_Internal::playerid(const PlayerReadyReq* msg) {
  return *msg->playerid_;
}
PlayerReadyReq::PlayerReadyReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XTankMsg.PlayerReadyReq)
}
PlayerReadyReq::PlayerReadyReq(const PlayerReadyReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_playerid()) {
    playerid_ = new ::XTankMsg::PlayerId(*from.playerid_);
  } else {
    playerid_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:XTankMsg.PlayerReadyReq)
}

inline void PlayerReadyReq::SharedCtor() {
playerid_ = nullptr;
}

PlayerReadyReq::~PlayerReadyReq() {
  // @@protoc_insertion_point(destructor:XTankMsg.PlayerReadyReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PlayerReadyReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete playerid_;
}

void PlayerReadyReq::ArenaDtor(void* object) {
  PlayerReadyReq* _this = reinterpret_cast< PlayerReadyReq* >(object);
  (void)_this;
}
void PlayerReadyReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayerReadyReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlayerReadyReq::Clear() {
// @@protoc_insertion_point(message_clear_start:XTankMsg.PlayerReadyReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && playerid_ != nullptr) {
    delete playerid_;
  }
  playerid_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerReadyReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .XTankMsg.PlayerId playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_playerid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerReadyReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XTankMsg.PlayerReadyReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .XTankMsg.PlayerId playerId = 1;
  if (this->_internal_has_playerid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::playerid(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XTankMsg.PlayerReadyReq)
  return target;
}

size_t PlayerReadyReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XTankMsg.PlayerReadyReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .XTankMsg.PlayerId playerId = 1;
  if (this->_internal_has_playerid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *playerid_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerReadyReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PlayerReadyReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerReadyReq::GetClassData() const { return &_class_data_; }

void PlayerReadyReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PlayerReadyReq *>(to)->MergeFrom(
      static_cast<const PlayerReadyReq &>(from));
}


void PlayerReadyReq::MergeFrom(const PlayerReadyReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XTankMsg.PlayerReadyReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_playerid()) {
    _internal_mutable_playerid()->::XTankMsg::PlayerId::MergeFrom(from._internal_playerid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerReadyReq::CopyFrom(const PlayerReadyReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XTankMsg.PlayerReadyReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerReadyReq::IsInitialized() const {
  return true;
}

void PlayerReadyReq::InternalSwap(PlayerReadyReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(playerid_, other->playerid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerReadyReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_XTankMsg_2eproto_getter, &descriptor_table_XTankMsg_2eproto_once,
      file_level_metadata_XTankMsg_2eproto[15]);
}

// ===================================================================

class PlayerReadyAck::_Internal {
 public:
};

PlayerReadyAck::PlayerReadyAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XTankMsg.PlayerReadyAck)
}
PlayerReadyAck::PlayerReadyAck(const PlayerReadyAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArenaForAllocation());
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:XTankMsg.PlayerReadyAck)
}

inline void PlayerReadyAck::SharedCtor() {
msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
success_ = false;
}

PlayerReadyAck::~PlayerReadyAck() {
  // @@protoc_insertion_point(destructor:XTankMsg.PlayerReadyAck)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PlayerReadyAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PlayerReadyAck::ArenaDtor(void* object) {
  PlayerReadyAck* _this = reinterpret_cast< PlayerReadyAck* >(object);
  (void)_this;
}
void PlayerReadyAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayerReadyAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlayerReadyAck::Clear() {
// @@protoc_insertion_point(message_clear_start:XTankMsg.PlayerReadyAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmpty();
  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerReadyAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "XTankMsg.PlayerReadyAck.msg"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerReadyAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XTankMsg.PlayerReadyAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string msg = 2;
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XTankMsg.PlayerReadyAck.msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XTankMsg.PlayerReadyAck)
  return target;
}

size_t PlayerReadyAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XTankMsg.PlayerReadyAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 2;
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerReadyAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PlayerReadyAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerReadyAck::GetClassData() const { return &_class_data_; }

void PlayerReadyAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PlayerReadyAck *>(to)->MergeFrom(
      static_cast<const PlayerReadyAck &>(from));
}


void PlayerReadyAck::MergeFrom(const PlayerReadyAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XTankMsg.PlayerReadyAck)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _internal_set_msg(from._internal_msg());
  }
  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerReadyAck::CopyFrom(const PlayerReadyAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XTankMsg.PlayerReadyAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerReadyAck::IsInitialized() const {
  return true;
}

void PlayerReadyAck::InternalSwap(PlayerReadyAck* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_, lhs_arena,
      &other->msg_, rhs_arena
  );
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerReadyAck::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_XTankMsg_2eproto_getter, &descriptor_table_XTankMsg_2eproto_once,
      file_level_metadata_XTankMsg_2eproto[16]);
}

// ===================================================================

class PlayerReadyCancelReq::_Internal {
 public:
  static const ::XTankMsg::PlayerId& playerid(const PlayerReadyCancelReq* msg);
};

const ::XTankMsg::PlayerId&
PlayerReadyCancelReq::_Internal::playerid(const PlayerReadyCancelReq* msg) {
  return *msg->playerid_;
}
PlayerReadyCancelReq::PlayerReadyCancelReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XTankMsg.PlayerReadyCancelReq)
}
PlayerReadyCancelReq::PlayerReadyCancelReq(const PlayerReadyCancelReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_playerid()) {
    playerid_ = new ::XTankMsg::PlayerId(*from.playerid_);
  } else {
    playerid_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:XTankMsg.PlayerReadyCancelReq)
}

inline void PlayerReadyCancelReq::SharedCtor() {
playerid_ = nullptr;
}

PlayerReadyCancelReq::~PlayerReadyCancelReq() {
  // @@protoc_insertion_point(destructor:XTankMsg.PlayerReadyCancelReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PlayerReadyCancelReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete playerid_;
}

void PlayerReadyCancelReq::ArenaDtor(void* object) {
  PlayerReadyCancelReq* _this = reinterpret_cast< PlayerReadyCancelReq* >(object);
  (void)_this;
}
void PlayerReadyCancelReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayerReadyCancelReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlayerReadyCancelReq::Clear() {
// @@protoc_insertion_point(message_clear_start:XTankMsg.PlayerReadyCancelReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && playerid_ != nullptr) {
    delete playerid_;
  }
  playerid_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerReadyCancelReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .XTankMsg.PlayerId playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_playerid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerReadyCancelReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XTankMsg.PlayerReadyCancelReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .XTankMsg.PlayerId playerId = 1;
  if (this->_internal_has_playerid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::playerid(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XTankMsg.PlayerReadyCancelReq)
  return target;
}

size_t PlayerReadyCancelReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XTankMsg.PlayerReadyCancelReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .XTankMsg.PlayerId playerId = 1;
  if (this->_internal_has_playerid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *playerid_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerReadyCancelReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PlayerReadyCancelReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerReadyCancelReq::GetClassData() const { return &_class_data_; }

void PlayerReadyCancelReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PlayerReadyCancelReq *>(to)->MergeFrom(
      static_cast<const PlayerReadyCancelReq &>(from));
}


void PlayerReadyCancelReq::MergeFrom(const PlayerReadyCancelReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XTankMsg.PlayerReadyCancelReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_playerid()) {
    _internal_mutable_playerid()->::XTankMsg::PlayerId::MergeFrom(from._internal_playerid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerReadyCancelReq::CopyFrom(const PlayerReadyCancelReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XTankMsg.PlayerReadyCancelReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerReadyCancelReq::IsInitialized() const {
  return true;
}

void PlayerReadyCancelReq::InternalSwap(PlayerReadyCancelReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(playerid_, other->playerid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerReadyCancelReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_XTankMsg_2eproto_getter, &descriptor_table_XTankMsg_2eproto_once,
      file_level_metadata_XTankMsg_2eproto[17]);
}

// ===================================================================

class PlayerReadyCancelAck::_Internal {
 public:
};

PlayerReadyCancelAck::PlayerReadyCancelAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XTankMsg.PlayerReadyCancelAck)
}
PlayerReadyCancelAck::PlayerReadyCancelAck(const PlayerReadyCancelAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArenaForAllocation());
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:XTankMsg.PlayerReadyCancelAck)
}

inline void PlayerReadyCancelAck::SharedCtor() {
msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
success_ = false;
}

PlayerReadyCancelAck::~PlayerReadyCancelAck() {
  // @@protoc_insertion_point(destructor:XTankMsg.PlayerReadyCancelAck)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PlayerReadyCancelAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PlayerReadyCancelAck::ArenaDtor(void* object) {
  PlayerReadyCancelAck* _this = reinterpret_cast< PlayerReadyCancelAck* >(object);
  (void)_this;
}
void PlayerReadyCancelAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayerReadyCancelAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlayerReadyCancelAck::Clear() {
// @@protoc_insertion_point(message_clear_start:XTankMsg.PlayerReadyCancelAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmpty();
  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerReadyCancelAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "XTankMsg.PlayerReadyCancelAck.msg"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerReadyCancelAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XTankMsg.PlayerReadyCancelAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string msg = 2;
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XTankMsg.PlayerReadyCancelAck.msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XTankMsg.PlayerReadyCancelAck)
  return target;
}

size_t PlayerReadyCancelAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XTankMsg.PlayerReadyCancelAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 2;
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerReadyCancelAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PlayerReadyCancelAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerReadyCancelAck::GetClassData() const { return &_class_data_; }

void PlayerReadyCancelAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PlayerReadyCancelAck *>(to)->MergeFrom(
      static_cast<const PlayerReadyCancelAck &>(from));
}


void PlayerReadyCancelAck::MergeFrom(const PlayerReadyCancelAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XTankMsg.PlayerReadyCancelAck)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _internal_set_msg(from._internal_msg());
  }
  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerReadyCancelAck::CopyFrom(const PlayerReadyCancelAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XTankMsg.PlayerReadyCancelAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerReadyCancelAck::IsInitialized() const {
  return true;
}

void PlayerReadyCancelAck::InternalSwap(PlayerReadyCancelAck* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_, lhs_arena,
      &other->msg_, rhs_arena
  );
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerReadyCancelAck::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_XTankMsg_2eproto_getter, &descriptor_table_XTankMsg_2eproto_once,
      file_level_metadata_XTankMsg_2eproto[18]);
}

// ===================================================================

class GameReadyReq::_Internal {
 public:
};

GameReadyReq::GameReadyReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XTankMsg.GameReadyReq)
}
GameReadyReq::GameReadyReq(const GameReadyReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:XTankMsg.GameReadyReq)
}

inline void GameReadyReq::SharedCtor() {
success_ = false;
}

GameReadyReq::~GameReadyReq() {
  // @@protoc_insertion_point(destructor:XTankMsg.GameReadyReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GameReadyReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameReadyReq::ArenaDtor(void* object) {
  GameReadyReq* _this = reinterpret_cast< GameReadyReq* >(object);
  (void)_this;
}
void GameReadyReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameReadyReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameReadyReq::Clear() {
// @@protoc_insertion_point(message_clear_start:XTankMsg.GameReadyReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameReadyReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameReadyReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XTankMsg.GameReadyReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XTankMsg.GameReadyReq)
  return target;
}

size_t GameReadyReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XTankMsg.GameReadyReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameReadyReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GameReadyReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameReadyReq::GetClassData() const { return &_class_data_; }

void GameReadyReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GameReadyReq *>(to)->MergeFrom(
      static_cast<const GameReadyReq &>(from));
}


void GameReadyReq::MergeFrom(const GameReadyReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XTankMsg.GameReadyReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameReadyReq::CopyFrom(const GameReadyReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XTankMsg.GameReadyReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameReadyReq::IsInitialized() const {
  return true;
}

void GameReadyReq::InternalSwap(GameReadyReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameReadyReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_XTankMsg_2eproto_getter, &descriptor_table_XTankMsg_2eproto_once,
      file_level_metadata_XTankMsg_2eproto[19]);
}

// ===================================================================

class GameInitNtf::_Internal {
 public:
};

GameInitNtf::GameInitNtf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  playerids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XTankMsg.GameInitNtf)
}
GameInitNtf::GameInitNtf(const GameInitNtf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      playerids_(from.playerids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  randseed_ = from.randseed_;
  // @@protoc_insertion_point(copy_constructor:XTankMsg.GameInitNtf)
}

inline void GameInitNtf::SharedCtor() {
randseed_ = 0;
}

GameInitNtf::~GameInitNtf() {
  // @@protoc_insertion_point(destructor:XTankMsg.GameInitNtf)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GameInitNtf::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameInitNtf::ArenaDtor(void* object) {
  GameInitNtf* _this = reinterpret_cast< GameInitNtf* >(object);
  (void)_this;
}
void GameInitNtf::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameInitNtf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameInitNtf::Clear() {
// @@protoc_insertion_point(message_clear_start:XTankMsg.GameInitNtf)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  playerids_.Clear();
  randseed_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameInitNtf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 randSeed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          randseed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .XTankMsg.PlayerId playerIds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_playerids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameInitNtf::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XTankMsg.GameInitNtf)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 randSeed = 1;
  if (this->_internal_randseed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_randseed(), target);
  }

  // repeated .XTankMsg.PlayerId playerIds = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_playerids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_playerids(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XTankMsg.GameInitNtf)
  return target;
}

size_t GameInitNtf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XTankMsg.GameInitNtf)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .XTankMsg.PlayerId playerIds = 2;
  total_size += 1UL * this->_internal_playerids_size();
  for (const auto& msg : this->playerids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 randSeed = 1;
  if (this->_internal_randseed() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_randseed());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameInitNtf::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GameInitNtf::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameInitNtf::GetClassData() const { return &_class_data_; }

void GameInitNtf::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GameInitNtf *>(to)->MergeFrom(
      static_cast<const GameInitNtf &>(from));
}


void GameInitNtf::MergeFrom(const GameInitNtf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XTankMsg.GameInitNtf)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  playerids_.MergeFrom(from.playerids_);
  if (from._internal_randseed() != 0) {
    _internal_set_randseed(from._internal_randseed());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameInitNtf::CopyFrom(const GameInitNtf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XTankMsg.GameInitNtf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameInitNtf::IsInitialized() const {
  return true;
}

void GameInitNtf::InternalSwap(GameInitNtf* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  playerids_.InternalSwap(&other->playerids_);
  swap(randseed_, other->randseed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameInitNtf::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_XTankMsg_2eproto_getter, &descriptor_table_XTankMsg_2eproto_once,
      file_level_metadata_XTankMsg_2eproto[20]);
}

// ===================================================================

class GameReadyAck::_Internal {
 public:
  static const ::XTankMsg::PlayerId& playerid(const GameReadyAck* msg);
};

const ::XTankMsg::PlayerId&
GameReadyAck::_Internal::playerid(const GameReadyAck* msg) {
  return *msg->playerid_;
}
GameReadyAck::GameReadyAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XTankMsg.GameReadyAck)
}
GameReadyAck::GameReadyAck(const GameReadyAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_playerid()) {
    playerid_ = new ::XTankMsg::PlayerId(*from.playerid_);
  } else {
    playerid_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:XTankMsg.GameReadyAck)
}

inline void GameReadyAck::SharedCtor() {
playerid_ = nullptr;
}

GameReadyAck::~GameReadyAck() {
  // @@protoc_insertion_point(destructor:XTankMsg.GameReadyAck)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GameReadyAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete playerid_;
}

void GameReadyAck::ArenaDtor(void* object) {
  GameReadyAck* _this = reinterpret_cast< GameReadyAck* >(object);
  (void)_this;
}
void GameReadyAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameReadyAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameReadyAck::Clear() {
// @@protoc_insertion_point(message_clear_start:XTankMsg.GameReadyAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && playerid_ != nullptr) {
    delete playerid_;
  }
  playerid_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameReadyAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .XTankMsg.PlayerId playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_playerid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameReadyAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XTankMsg.GameReadyAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .XTankMsg.PlayerId playerId = 1;
  if (this->_internal_has_playerid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::playerid(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XTankMsg.GameReadyAck)
  return target;
}

size_t GameReadyAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XTankMsg.GameReadyAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .XTankMsg.PlayerId playerId = 1;
  if (this->_internal_has_playerid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *playerid_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameReadyAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GameReadyAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameReadyAck::GetClassData() const { return &_class_data_; }

void GameReadyAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GameReadyAck *>(to)->MergeFrom(
      static_cast<const GameReadyAck &>(from));
}


void GameReadyAck::MergeFrom(const GameReadyAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XTankMsg.GameReadyAck)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_playerid()) {
    _internal_mutable_playerid()->::XTankMsg::PlayerId::MergeFrom(from._internal_playerid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameReadyAck::CopyFrom(const GameReadyAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XTankMsg.GameReadyAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameReadyAck::IsInitialized() const {
  return true;
}

void GameReadyAck::InternalSwap(GameReadyAck* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(playerid_, other->playerid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameReadyAck::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_XTankMsg_2eproto_getter, &descriptor_table_XTankMsg_2eproto_once,
      file_level_metadata_XTankMsg_2eproto[21]);
}

// ===================================================================

class GameStartNtf::_Internal {
 public:
};

GameStartNtf::GameStartNtf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XTankMsg.GameStartNtf)
}
GameStartNtf::GameStartNtf(const GameStartNtf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  latency_ = from.latency_;
  // @@protoc_insertion_point(copy_constructor:XTankMsg.GameStartNtf)
}

inline void GameStartNtf::SharedCtor() {
latency_ = 0;
}

GameStartNtf::~GameStartNtf() {
  // @@protoc_insertion_point(destructor:XTankMsg.GameStartNtf)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GameStartNtf::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameStartNtf::ArenaDtor(void* object) {
  GameStartNtf* _this = reinterpret_cast< GameStartNtf* >(object);
  (void)_this;
}
void GameStartNtf::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameStartNtf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameStartNtf::Clear() {
// @@protoc_insertion_point(message_clear_start:XTankMsg.GameStartNtf)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  latency_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameStartNtf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float latency = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          latency_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameStartNtf::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XTankMsg.GameStartNtf)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float latency = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_latency = this->_internal_latency();
  uint32_t raw_latency;
  memcpy(&raw_latency, &tmp_latency, sizeof(tmp_latency));
  if (raw_latency != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_latency(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XTankMsg.GameStartNtf)
  return target;
}

size_t GameStartNtf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XTankMsg.GameStartNtf)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float latency = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_latency = this->_internal_latency();
  uint32_t raw_latency;
  memcpy(&raw_latency, &tmp_latency, sizeof(tmp_latency));
  if (raw_latency != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameStartNtf::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GameStartNtf::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameStartNtf::GetClassData() const { return &_class_data_; }

void GameStartNtf::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GameStartNtf *>(to)->MergeFrom(
      static_cast<const GameStartNtf &>(from));
}


void GameStartNtf::MergeFrom(const GameStartNtf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XTankMsg.GameStartNtf)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_latency = from._internal_latency();
  uint32_t raw_latency;
  memcpy(&raw_latency, &tmp_latency, sizeof(tmp_latency));
  if (raw_latency != 0) {
    _internal_set_latency(from._internal_latency());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameStartNtf::CopyFrom(const GameStartNtf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XTankMsg.GameStartNtf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameStartNtf::IsInitialized() const {
  return true;
}

void GameStartNtf::InternalSwap(GameStartNtf* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(latency_, other->latency_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameStartNtf::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_XTankMsg_2eproto_getter, &descriptor_table_XTankMsg_2eproto_once,
      file_level_metadata_XTankMsg_2eproto[22]);
}

// ===================================================================

class PlayerInputNtf::_Internal {
 public:
  static const ::XTankMsg::PlayerId& playerid(const PlayerInputNtf* msg);
};

const ::XTankMsg::PlayerId&
PlayerInputNtf::_Internal::playerid(const PlayerInputNtf* msg) {
  return *msg->playerid_;
}
PlayerInputNtf::PlayerInputNtf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XTankMsg.PlayerInputNtf)
}
PlayerInputNtf::PlayerInputNtf(const PlayerInputNtf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_playerid()) {
    playerid_ = new ::XTankMsg::PlayerId(*from.playerid_);
  } else {
    playerid_ = nullptr;
  }
  ::memcpy(&frameid_, &from.frameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&playercmd_) -
    reinterpret_cast<char*>(&frameid_)) + sizeof(playercmd_));
  // @@protoc_insertion_point(copy_constructor:XTankMsg.PlayerInputNtf)
}

inline void PlayerInputNtf::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&playerid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&playercmd_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(playercmd_));
}

PlayerInputNtf::~PlayerInputNtf() {
  // @@protoc_insertion_point(destructor:XTankMsg.PlayerInputNtf)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PlayerInputNtf::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete playerid_;
}

void PlayerInputNtf::ArenaDtor(void* object) {
  PlayerInputNtf* _this = reinterpret_cast< PlayerInputNtf* >(object);
  (void)_this;
}
void PlayerInputNtf::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayerInputNtf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlayerInputNtf::Clear() {
// @@protoc_insertion_point(message_clear_start:XTankMsg.PlayerInputNtf)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && playerid_ != nullptr) {
    delete playerid_;
  }
  playerid_ = nullptr;
  ::memset(&frameid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&playercmd_) -
      reinterpret_cast<char*>(&frameid_)) + sizeof(playercmd_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerInputNtf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .XTankMsg.PlayerId playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_playerid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 frameId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          frameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 playerCmd = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          playercmd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerInputNtf::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XTankMsg.PlayerInputNtf)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .XTankMsg.PlayerId playerId = 1;
  if (this->_internal_has_playerid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::playerid(this), target, stream);
  }

  // uint32 frameId = 2;
  if (this->_internal_frameid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_frameid(), target);
  }

  // uint32 playerCmd = 3;
  if (this->_internal_playercmd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_playercmd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XTankMsg.PlayerInputNtf)
  return target;
}

size_t PlayerInputNtf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XTankMsg.PlayerInputNtf)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .XTankMsg.PlayerId playerId = 1;
  if (this->_internal_has_playerid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *playerid_);
  }

  // uint32 frameId = 2;
  if (this->_internal_frameid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_frameid());
  }

  // uint32 playerCmd = 3;
  if (this->_internal_playercmd() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_playercmd());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerInputNtf::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PlayerInputNtf::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerInputNtf::GetClassData() const { return &_class_data_; }

void PlayerInputNtf::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PlayerInputNtf *>(to)->MergeFrom(
      static_cast<const PlayerInputNtf &>(from));
}


void PlayerInputNtf::MergeFrom(const PlayerInputNtf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XTankMsg.PlayerInputNtf)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_playerid()) {
    _internal_mutable_playerid()->::XTankMsg::PlayerId::MergeFrom(from._internal_playerid());
  }
  if (from._internal_frameid() != 0) {
    _internal_set_frameid(from._internal_frameid());
  }
  if (from._internal_playercmd() != 0) {
    _internal_set_playercmd(from._internal_playercmd());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerInputNtf::CopyFrom(const PlayerInputNtf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XTankMsg.PlayerInputNtf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInputNtf::IsInitialized() const {
  return true;
}

void PlayerInputNtf::InternalSwap(PlayerInputNtf* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerInputNtf, playercmd_)
      + sizeof(PlayerInputNtf::playercmd_)
      - PROTOBUF_FIELD_OFFSET(PlayerInputNtf, playerid_)>(
          reinterpret_cast<char*>(&playerid_),
          reinterpret_cast<char*>(&other->playerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerInputNtf::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_XTankMsg_2eproto_getter, &descriptor_table_XTankMsg_2eproto_once,
      file_level_metadata_XTankMsg_2eproto[23]);
}

// ===================================================================

class GameForwardNtf::_Internal {
 public:
};

GameForwardNtf::GameForwardNtf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  playercmds_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XTankMsg.GameForwardNtf)
}
GameForwardNtf::GameForwardNtf(const GameForwardNtf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      playercmds_(from.playercmds_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  frameid_ = from.frameid_;
  // @@protoc_insertion_point(copy_constructor:XTankMsg.GameForwardNtf)
}

inline void GameForwardNtf::SharedCtor() {
frameid_ = 0u;
}

GameForwardNtf::~GameForwardNtf() {
  // @@protoc_insertion_point(destructor:XTankMsg.GameForwardNtf)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GameForwardNtf::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameForwardNtf::ArenaDtor(void* object) {
  GameForwardNtf* _this = reinterpret_cast< GameForwardNtf* >(object);
  (void)_this;
}
void GameForwardNtf::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameForwardNtf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameForwardNtf::Clear() {
// @@protoc_insertion_point(message_clear_start:XTankMsg.GameForwardNtf)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  playercmds_.Clear();
  frameid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameForwardNtf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 frameId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          frameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 playerCmds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_playercmds(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_playercmds(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameForwardNtf::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XTankMsg.GameForwardNtf)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 frameId = 1;
  if (this->_internal_frameid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_frameid(), target);
  }

  // repeated uint32 playerCmds = 2;
  {
    int byte_size = _playercmds_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_playercmds(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XTankMsg.GameForwardNtf)
  return target;
}

size_t GameForwardNtf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XTankMsg.GameForwardNtf)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 playerCmds = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->playercmds_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _playercmds_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 frameId = 1;
  if (this->_internal_frameid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_frameid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameForwardNtf::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GameForwardNtf::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameForwardNtf::GetClassData() const { return &_class_data_; }

void GameForwardNtf::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GameForwardNtf *>(to)->MergeFrom(
      static_cast<const GameForwardNtf &>(from));
}


void GameForwardNtf::MergeFrom(const GameForwardNtf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XTankMsg.GameForwardNtf)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  playercmds_.MergeFrom(from.playercmds_);
  if (from._internal_frameid() != 0) {
    _internal_set_frameid(from._internal_frameid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameForwardNtf::CopyFrom(const GameForwardNtf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XTankMsg.GameForwardNtf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameForwardNtf::IsInitialized() const {
  return true;
}

void GameForwardNtf::InternalSwap(GameForwardNtf* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  playercmds_.InternalSwap(&other->playercmds_);
  swap(frameid_, other->frameid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameForwardNtf::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_XTankMsg_2eproto_getter, &descriptor_table_XTankMsg_2eproto_once,
      file_level_metadata_XTankMsg_2eproto[24]);
}

// ===================================================================

class PlayerExitReq::_Internal {
 public:
  static const ::XTankMsg::PlayerId& playerid(const PlayerExitReq* msg);
};

const ::XTankMsg::PlayerId&
PlayerExitReq::_Internal::playerid(const PlayerExitReq* msg) {
  return *msg->playerid_;
}
PlayerExitReq::PlayerExitReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XTankMsg.PlayerExitReq)
}
PlayerExitReq::PlayerExitReq(const PlayerExitReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_playerid()) {
    playerid_ = new ::XTankMsg::PlayerId(*from.playerid_);
  } else {
    playerid_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:XTankMsg.PlayerExitReq)
}

inline void PlayerExitReq::SharedCtor() {
playerid_ = nullptr;
}

PlayerExitReq::~PlayerExitReq() {
  // @@protoc_insertion_point(destructor:XTankMsg.PlayerExitReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PlayerExitReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete playerid_;
}

void PlayerExitReq::ArenaDtor(void* object) {
  PlayerExitReq* _this = reinterpret_cast< PlayerExitReq* >(object);
  (void)_this;
}
void PlayerExitReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayerExitReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlayerExitReq::Clear() {
// @@protoc_insertion_point(message_clear_start:XTankMsg.PlayerExitReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && playerid_ != nullptr) {
    delete playerid_;
  }
  playerid_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerExitReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .XTankMsg.PlayerId playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_playerid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerExitReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XTankMsg.PlayerExitReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .XTankMsg.PlayerId playerId = 1;
  if (this->_internal_has_playerid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::playerid(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XTankMsg.PlayerExitReq)
  return target;
}

size_t PlayerExitReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XTankMsg.PlayerExitReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .XTankMsg.PlayerId playerId = 1;
  if (this->_internal_has_playerid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *playerid_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerExitReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PlayerExitReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerExitReq::GetClassData() const { return &_class_data_; }

void PlayerExitReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PlayerExitReq *>(to)->MergeFrom(
      static_cast<const PlayerExitReq &>(from));
}


void PlayerExitReq::MergeFrom(const PlayerExitReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XTankMsg.PlayerExitReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_playerid()) {
    _internal_mutable_playerid()->::XTankMsg::PlayerId::MergeFrom(from._internal_playerid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerExitReq::CopyFrom(const PlayerExitReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XTankMsg.PlayerExitReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerExitReq::IsInitialized() const {
  return true;
}

void PlayerExitReq::InternalSwap(PlayerExitReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(playerid_, other->playerid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerExitReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_XTankMsg_2eproto_getter, &descriptor_table_XTankMsg_2eproto_once,
      file_level_metadata_XTankMsg_2eproto[25]);
}

// ===================================================================

class PlayerExitAck::_Internal {
 public:
};

PlayerExitAck::PlayerExitAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XTankMsg.PlayerExitAck)
}
PlayerExitAck::PlayerExitAck(const PlayerExitAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArenaForAllocation());
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:XTankMsg.PlayerExitAck)
}

inline void PlayerExitAck::SharedCtor() {
msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
success_ = false;
}

PlayerExitAck::~PlayerExitAck() {
  // @@protoc_insertion_point(destructor:XTankMsg.PlayerExitAck)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PlayerExitAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PlayerExitAck::ArenaDtor(void* object) {
  PlayerExitAck* _this = reinterpret_cast< PlayerExitAck* >(object);
  (void)_this;
}
void PlayerExitAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayerExitAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlayerExitAck::Clear() {
// @@protoc_insertion_point(message_clear_start:XTankMsg.PlayerExitAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmpty();
  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerExitAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "XTankMsg.PlayerExitAck.msg"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerExitAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XTankMsg.PlayerExitAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string msg = 2;
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XTankMsg.PlayerExitAck.msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XTankMsg.PlayerExitAck)
  return target;
}

size_t PlayerExitAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XTankMsg.PlayerExitAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 2;
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerExitAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PlayerExitAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerExitAck::GetClassData() const { return &_class_data_; }

void PlayerExitAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PlayerExitAck *>(to)->MergeFrom(
      static_cast<const PlayerExitAck &>(from));
}


void PlayerExitAck::MergeFrom(const PlayerExitAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XTankMsg.PlayerExitAck)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _internal_set_msg(from._internal_msg());
  }
  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerExitAck::CopyFrom(const PlayerExitAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XTankMsg.PlayerExitAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerExitAck::IsInitialized() const {
  return true;
}

void PlayerExitAck::InternalSwap(PlayerExitAck* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_, lhs_arena,
      &other->msg_, rhs_arena
  );
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerExitAck::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_XTankMsg_2eproto_getter, &descriptor_table_XTankMsg_2eproto_once,
      file_level_metadata_XTankMsg_2eproto[26]);
}

// ===================================================================

class PlayerCutInReq::_Internal {
 public:
  static const ::XTankMsg::PlayerId& playerid(const PlayerCutInReq* msg);
};

const ::XTankMsg::PlayerId&
PlayerCutInReq::_Internal::playerid(const PlayerCutInReq* msg) {
  return *msg->playerid_;
}
PlayerCutInReq::PlayerCutInReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XTankMsg.PlayerCutInReq)
}
PlayerCutInReq::PlayerCutInReq(const PlayerCutInReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_playerid()) {
    playerid_ = new ::XTankMsg::PlayerId(*from.playerid_);
  } else {
    playerid_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:XTankMsg.PlayerCutInReq)
}

inline void PlayerCutInReq::SharedCtor() {
playerid_ = nullptr;
}

PlayerCutInReq::~PlayerCutInReq() {
  // @@protoc_insertion_point(destructor:XTankMsg.PlayerCutInReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PlayerCutInReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete playerid_;
}

void PlayerCutInReq::ArenaDtor(void* object) {
  PlayerCutInReq* _this = reinterpret_cast< PlayerCutInReq* >(object);
  (void)_this;
}
void PlayerCutInReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayerCutInReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlayerCutInReq::Clear() {
// @@protoc_insertion_point(message_clear_start:XTankMsg.PlayerCutInReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && playerid_ != nullptr) {
    delete playerid_;
  }
  playerid_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerCutInReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .XTankMsg.PlayerId playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_playerid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerCutInReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XTankMsg.PlayerCutInReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .XTankMsg.PlayerId playerId = 1;
  if (this->_internal_has_playerid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::playerid(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XTankMsg.PlayerCutInReq)
  return target;
}

size_t PlayerCutInReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XTankMsg.PlayerCutInReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .XTankMsg.PlayerId playerId = 1;
  if (this->_internal_has_playerid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *playerid_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerCutInReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PlayerCutInReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerCutInReq::GetClassData() const { return &_class_data_; }

void PlayerCutInReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PlayerCutInReq *>(to)->MergeFrom(
      static_cast<const PlayerCutInReq &>(from));
}


void PlayerCutInReq::MergeFrom(const PlayerCutInReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XTankMsg.PlayerCutInReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_playerid()) {
    _internal_mutable_playerid()->::XTankMsg::PlayerId::MergeFrom(from._internal_playerid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerCutInReq::CopyFrom(const PlayerCutInReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XTankMsg.PlayerCutInReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerCutInReq::IsInitialized() const {
  return true;
}

void PlayerCutInReq::InternalSwap(PlayerCutInReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(playerid_, other->playerid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerCutInReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_XTankMsg_2eproto_getter, &descriptor_table_XTankMsg_2eproto_once,
      file_level_metadata_XTankMsg_2eproto[27]);
}

// ===================================================================

class PlayerCutInNtf::_Internal {
 public:
};

PlayerCutInNtf::PlayerCutInNtf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  playerids_(arena),
  cmds_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XTankMsg.PlayerCutInNtf)
}
PlayerCutInNtf::PlayerCutInNtf(const PlayerCutInNtf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      playerids_(from.playerids_),
      cmds_(from.cmds_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:XTankMsg.PlayerCutInNtf)
}

inline void PlayerCutInNtf::SharedCtor() {
}

PlayerCutInNtf::~PlayerCutInNtf() {
  // @@protoc_insertion_point(destructor:XTankMsg.PlayerCutInNtf)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PlayerCutInNtf::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PlayerCutInNtf::ArenaDtor(void* object) {
  PlayerCutInNtf* _this = reinterpret_cast< PlayerCutInNtf* >(object);
  (void)_this;
}
void PlayerCutInNtf::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayerCutInNtf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlayerCutInNtf::Clear() {
// @@protoc_insertion_point(message_clear_start:XTankMsg.PlayerCutInNtf)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  playerids_.Clear();
  cmds_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerCutInNtf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .XTankMsg.PlayerId playerIds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_playerids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .XTankMsg.GameForwardNtf cmds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cmds(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerCutInNtf::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XTankMsg.PlayerCutInNtf)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .XTankMsg.PlayerId playerIds = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_playerids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_playerids(i), target, stream);
  }

  // repeated .XTankMsg.GameForwardNtf cmds = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cmds_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_cmds(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XTankMsg.PlayerCutInNtf)
  return target;
}

size_t PlayerCutInNtf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XTankMsg.PlayerCutInNtf)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .XTankMsg.PlayerId playerIds = 1;
  total_size += 1UL * this->_internal_playerids_size();
  for (const auto& msg : this->playerids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .XTankMsg.GameForwardNtf cmds = 2;
  total_size += 1UL * this->_internal_cmds_size();
  for (const auto& msg : this->cmds_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerCutInNtf::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PlayerCutInNtf::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerCutInNtf::GetClassData() const { return &_class_data_; }

void PlayerCutInNtf::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PlayerCutInNtf *>(to)->MergeFrom(
      static_cast<const PlayerCutInNtf &>(from));
}


void PlayerCutInNtf::MergeFrom(const PlayerCutInNtf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XTankMsg.PlayerCutInNtf)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  playerids_.MergeFrom(from.playerids_);
  cmds_.MergeFrom(from.cmds_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerCutInNtf::CopyFrom(const PlayerCutInNtf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XTankMsg.PlayerCutInNtf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerCutInNtf::IsInitialized() const {
  return true;
}

void PlayerCutInNtf::InternalSwap(PlayerCutInNtf* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  playerids_.InternalSwap(&other->playerids_);
  cmds_.InternalSwap(&other->cmds_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerCutInNtf::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_XTankMsg_2eproto_getter, &descriptor_table_XTankMsg_2eproto_once,
      file_level_metadata_XTankMsg_2eproto[28]);
}

// ===================================================================

class PlayerChaseUpNtf::_Internal {
 public:
  static const ::XTankMsg::PlayerId& playerid(const PlayerChaseUpNtf* msg);
};

const ::XTankMsg::PlayerId&
PlayerChaseUpNtf::_Internal::playerid(const PlayerChaseUpNtf* msg) {
  return *msg->playerid_;
}
PlayerChaseUpNtf::PlayerChaseUpNtf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XTankMsg.PlayerChaseUpNtf)
}
PlayerChaseUpNtf::PlayerChaseUpNtf(const PlayerChaseUpNtf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_playerid()) {
    playerid_ = new ::XTankMsg::PlayerId(*from.playerid_);
  } else {
    playerid_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:XTankMsg.PlayerChaseUpNtf)
}

inline void PlayerChaseUpNtf::SharedCtor() {
playerid_ = nullptr;
}

PlayerChaseUpNtf::~PlayerChaseUpNtf() {
  // @@protoc_insertion_point(destructor:XTankMsg.PlayerChaseUpNtf)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PlayerChaseUpNtf::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete playerid_;
}

void PlayerChaseUpNtf::ArenaDtor(void* object) {
  PlayerChaseUpNtf* _this = reinterpret_cast< PlayerChaseUpNtf* >(object);
  (void)_this;
}
void PlayerChaseUpNtf::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayerChaseUpNtf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlayerChaseUpNtf::Clear() {
// @@protoc_insertion_point(message_clear_start:XTankMsg.PlayerChaseUpNtf)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && playerid_ != nullptr) {
    delete playerid_;
  }
  playerid_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerChaseUpNtf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .XTankMsg.PlayerId playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_playerid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerChaseUpNtf::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XTankMsg.PlayerChaseUpNtf)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .XTankMsg.PlayerId playerId = 1;
  if (this->_internal_has_playerid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::playerid(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XTankMsg.PlayerChaseUpNtf)
  return target;
}

size_t PlayerChaseUpNtf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XTankMsg.PlayerChaseUpNtf)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .XTankMsg.PlayerId playerId = 1;
  if (this->_internal_has_playerid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *playerid_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerChaseUpNtf::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PlayerChaseUpNtf::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerChaseUpNtf::GetClassData() const { return &_class_data_; }

void PlayerChaseUpNtf::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PlayerChaseUpNtf *>(to)->MergeFrom(
      static_cast<const PlayerChaseUpNtf &>(from));
}


void PlayerChaseUpNtf::MergeFrom(const PlayerChaseUpNtf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XTankMsg.PlayerChaseUpNtf)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_playerid()) {
    _internal_mutable_playerid()->::XTankMsg::PlayerId::MergeFrom(from._internal_playerid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerChaseUpNtf::CopyFrom(const PlayerChaseUpNtf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XTankMsg.PlayerChaseUpNtf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerChaseUpNtf::IsInitialized() const {
  return true;
}

void PlayerChaseUpNtf::InternalSwap(PlayerChaseUpNtf* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(playerid_, other->playerid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerChaseUpNtf::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_XTankMsg_2eproto_getter, &descriptor_table_XTankMsg_2eproto_once,
      file_level_metadata_XTankMsg_2eproto[29]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace XTankMsg
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::XTankMsg::PlayerId* Arena::CreateMaybeMessage< ::XTankMsg::PlayerId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XTankMsg::PlayerId >(arena);
}
template<> PROTOBUF_NOINLINE ::XTankMsg::LoginReq* Arena::CreateMaybeMessage< ::XTankMsg::LoginReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XTankMsg::LoginReq >(arena);
}
template<> PROTOBUF_NOINLINE ::XTankMsg::LoginAck* Arena::CreateMaybeMessage< ::XTankMsg::LoginAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XTankMsg::LoginAck >(arena);
}
template<> PROTOBUF_NOINLINE ::XTankMsg::LogoutReq* Arena::CreateMaybeMessage< ::XTankMsg::LogoutReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XTankMsg::LogoutReq >(arena);
}
template<> PROTOBUF_NOINLINE ::XTankMsg::LogoutAck* Arena::CreateMaybeMessage< ::XTankMsg::LogoutAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XTankMsg::LogoutAck >(arena);
}
template<> PROTOBUF_NOINLINE ::XTankMsg::LobbyNtf_RoomInfo* Arena::CreateMaybeMessage< ::XTankMsg::LobbyNtf_RoomInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XTankMsg::LobbyNtf_RoomInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::XTankMsg::LobbyNtf* Arena::CreateMaybeMessage< ::XTankMsg::LobbyNtf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XTankMsg::LobbyNtf >(arena);
}
template<> PROTOBUF_NOINLINE ::XTankMsg::RoomCreateReq* Arena::CreateMaybeMessage< ::XTankMsg::RoomCreateReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XTankMsg::RoomCreateReq >(arena);
}
template<> PROTOBUF_NOINLINE ::XTankMsg::RoomCreateAck* Arena::CreateMaybeMessage< ::XTankMsg::RoomCreateAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XTankMsg::RoomCreateAck >(arena);
}
template<> PROTOBUF_NOINLINE ::XTankMsg::RoomJoinReq* Arena::CreateMaybeMessage< ::XTankMsg::RoomJoinReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XTankMsg::RoomJoinReq >(arena);
}
template<> PROTOBUF_NOINLINE ::XTankMsg::RoomJoinAck* Arena::CreateMaybeMessage< ::XTankMsg::RoomJoinAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XTankMsg::RoomJoinAck >(arena);
}
template<> PROTOBUF_NOINLINE ::XTankMsg::RoomExitReq* Arena::CreateMaybeMessage< ::XTankMsg::RoomExitReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XTankMsg::RoomExitReq >(arena);
}
template<> PROTOBUF_NOINLINE ::XTankMsg::RoomExitAck* Arena::CreateMaybeMessage< ::XTankMsg::RoomExitAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XTankMsg::RoomExitAck >(arena);
}
template<> PROTOBUF_NOINLINE ::XTankMsg::RoomNtf_PlayerState* Arena::CreateMaybeMessage< ::XTankMsg::RoomNtf_PlayerState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XTankMsg::RoomNtf_PlayerState >(arena);
}
template<> PROTOBUF_NOINLINE ::XTankMsg::RoomNtf* Arena::CreateMaybeMessage< ::XTankMsg::RoomNtf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XTankMsg::RoomNtf >(arena);
}
template<> PROTOBUF_NOINLINE ::XTankMsg::PlayerReadyReq* Arena::CreateMaybeMessage< ::XTankMsg::PlayerReadyReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XTankMsg::PlayerReadyReq >(arena);
}
template<> PROTOBUF_NOINLINE ::XTankMsg::PlayerReadyAck* Arena::CreateMaybeMessage< ::XTankMsg::PlayerReadyAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XTankMsg::PlayerReadyAck >(arena);
}
template<> PROTOBUF_NOINLINE ::XTankMsg::PlayerReadyCancelReq* Arena::CreateMaybeMessage< ::XTankMsg::PlayerReadyCancelReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XTankMsg::PlayerReadyCancelReq >(arena);
}
template<> PROTOBUF_NOINLINE ::XTankMsg::PlayerReadyCancelAck* Arena::CreateMaybeMessage< ::XTankMsg::PlayerReadyCancelAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XTankMsg::PlayerReadyCancelAck >(arena);
}
template<> PROTOBUF_NOINLINE ::XTankMsg::GameReadyReq* Arena::CreateMaybeMessage< ::XTankMsg::GameReadyReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XTankMsg::GameReadyReq >(arena);
}
template<> PROTOBUF_NOINLINE ::XTankMsg::GameInitNtf* Arena::CreateMaybeMessage< ::XTankMsg::GameInitNtf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XTankMsg::GameInitNtf >(arena);
}
template<> PROTOBUF_NOINLINE ::XTankMsg::GameReadyAck* Arena::CreateMaybeMessage< ::XTankMsg::GameReadyAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XTankMsg::GameReadyAck >(arena);
}
template<> PROTOBUF_NOINLINE ::XTankMsg::GameStartNtf* Arena::CreateMaybeMessage< ::XTankMsg::GameStartNtf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XTankMsg::GameStartNtf >(arena);
}
template<> PROTOBUF_NOINLINE ::XTankMsg::PlayerInputNtf* Arena::CreateMaybeMessage< ::XTankMsg::PlayerInputNtf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XTankMsg::PlayerInputNtf >(arena);
}
template<> PROTOBUF_NOINLINE ::XTankMsg::GameForwardNtf* Arena::CreateMaybeMessage< ::XTankMsg::GameForwardNtf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XTankMsg::GameForwardNtf >(arena);
}
template<> PROTOBUF_NOINLINE ::XTankMsg::PlayerExitReq* Arena::CreateMaybeMessage< ::XTankMsg::PlayerExitReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XTankMsg::PlayerExitReq >(arena);
}
template<> PROTOBUF_NOINLINE ::XTankMsg::PlayerExitAck* Arena::CreateMaybeMessage< ::XTankMsg::PlayerExitAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XTankMsg::PlayerExitAck >(arena);
}
template<> PROTOBUF_NOINLINE ::XTankMsg::PlayerCutInReq* Arena::CreateMaybeMessage< ::XTankMsg::PlayerCutInReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XTankMsg::PlayerCutInReq >(arena);
}
template<> PROTOBUF_NOINLINE ::XTankMsg::PlayerCutInNtf* Arena::CreateMaybeMessage< ::XTankMsg::PlayerCutInNtf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XTankMsg::PlayerCutInNtf >(arena);
}
template<> PROTOBUF_NOINLINE ::XTankMsg::PlayerChaseUpNtf* Arena::CreateMaybeMessage< ::XTankMsg::PlayerChaseUpNtf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XTankMsg::PlayerChaseUpNtf >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
